您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块Stack属性constructorpushpoppeeklocateforEachisEmpty[Symbol.iterator]@ohos.util.Stack (线性容器Stack) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
说明
本模块首批接口从API version 8开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。 
 Stack基于数组的数据结构实现，特点是先进后出，只能在一端进行数据的插入和删除。 Stack和Queue相比，Queue基于循环队列实现，只能在一端删除，另一端插入，而Stack都在一端操作。 推荐使用场景： 一般符合先进后出的场景可以使用Stack。 文档中存在泛型的使用,涉及以下泛型标记符: T: Type, 类 导入模块已复制import Stack from '@ohos.util.Stack';    Stack 属性系统能力： SystemCapability.Utils.Lang 名称  类型  可读  可写  说明    length  number  是  否  Stack的元素个数。      constructorconstructor() Stack的构造函数。 系统能力： SystemCapability.Utils.Lang 错误码： 以下错误码的详细介绍请参见语言基础类库错误码。  错误码ID  错误信息  10200012  The Stack's constructor cannot be directly invoked.     示例： 已复制let stack = new Stack();  pushpush(item: T): T 在栈顶插入元素，并返回该元素。 系统能力： SystemCapability.Utils.Lang 参数： 参数名  类型  必填  说明    item  T  是  添加进去的元素。     返回值：  类型  说明  T  返回被添加进去的元素。     错误码： 以下错误码的详细介绍请参见语言基础类库错误码。  错误码ID  错误信息  10200011  The push method cannot be bound.     示例： 已复制let stack = new Stack();let result = stack.push("a");let result1 = stack.push(1);let b = [1, 2, 3];let result2 = stack.push(b);let c = {name : "Dylon", age : "13"};let result3 = stack.push(c);  poppop(): T 删除栈顶元素并返回该元素，栈为空时返回undefined。 系统能力： SystemCapability.Utils.Lang 返回值：  类型  说明  T  返回栈顶元素，栈为空时返回undefined。     错误码： 以下错误码的详细介绍请参见语言基础类库错误码。  错误码ID  错误信息  10200011  The pop method cannot be bound.     示例： 已复制let stack = new Stack();stack.push(2);stack.push(4);stack.push(5);stack.push(2);stack.push(4);let result = stack.pop();  peekpeek(): T 获取并返回栈顶元素。 系统能力： SystemCapability.Utils.Lang 返回值：  类型  说明  T  返回栈顶元素。     错误码： 以下错误码的详细介绍请参见语言基础类库错误码。  错误码ID  错误信息  10200011  The peek method cannot be bound.     示例： 已复制let stack = new Stack();stack.push(2);stack.push(4);stack.push(5);stack.push(2);let result = stack.peek();  locatelocate(element: T): number 返回指定元素第一次出现时的下标值，查找失败返回-1。 系统能力： SystemCapability.Utils.Lang 参数： 参数名  类型  必填  说明    element  T  是  指定元素。     返回值：  类型  说明  number  找到就返回下标值，没有该值时返回-1。     错误码： 以下错误码的详细介绍请参见语言基础类库错误码。  错误码ID  错误信息  10200011  The locate method cannot be bound.     示例： 已复制let stack = new Stack();stack.push(2);stack.push(4);stack.push(5);stack.push(2);let result = stack.locate(2);  forEachforEach(callbackFn: (value: T, index?: number, stack?: Stack<T>) => void, thisArg?: Object): void 通过回调函数来遍历Stack实例对象上的元素以及元素对应的下标。 系统能力： SystemCapability.Utils.Lang 参数： 参数名  类型  必填  说明    callbackFn  function  是  回调函数。   thisArg  Object  否  callbackfn被调用时用作this值。     callbackfn的参数说明： 参数名  类型  必填  说明    value  T  是  当前遍历到的元素。   index  number  否  当前遍历到的下标值。   stack  Stack<T>  否  当前调用forEach方法的实例对象。     错误码： 以下错误码的详细介绍请参见语言基础类库错误码。  错误码ID  错误信息  10200011  The forEach method cannot be bound.     示例： 已复制let stack = new Stack();stack.push(2);stack.push(4);stack.push(5);stack.push(4);stack.forEach((value, index) => {    console.log("value:" + value, "index:" + index);});  isEmptyisEmpty(): boolean 判断该栈是否为空。 系统能力： SystemCapability.Utils.Lang 返回值：  类型  说明  boolean  为空返回true，不为空返回false。     错误码： 以下错误码的详细介绍请参见语言基础类库错误码。  错误码ID  错误信息  10200011  The isEmpty method cannot be bound.     示例： 已复制let stack = new Stack();stack.push(2);stack.push(4);stack.push(5);stack.push(4);let result = stack.isEmpty();  [Symbol.iterator][Symbol.iterator](): IterableIterator<T> 返回一个迭代器，迭代器的每一项都是一个 JavaScript 对象,并返回该对象。 系统能力： SystemCapability.Utils.Lang 返回值：  类型  说明  IterableIterator<T>  返回一个迭代器。     错误码： 以下错误码的详细介绍请参见语言基础类库错误码。  错误码ID  错误信息  10200011  The Symbol.iterator method cannot be bound.     示例： 已复制let stack = new Stack();stack.push(2);stack.push(4);stack.push(5);stack.push(4);
// 使用方法一：for (let item of stack) {   console.log("value:" + item); }
// 使用方法二：let iter = stack[Symbol.iterator]();let temp = iter.next().value;while(temp != undefined) {  console.log("value:" + temp);  temp = iter.next().value;}   上一篇 @ohos.util.Queue (线性容器Queue) 下一篇 @ohos.util.TreeMap (非线性容器TreeMap) 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。