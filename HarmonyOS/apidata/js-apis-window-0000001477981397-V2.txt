您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块WindowType7+Configuration9+AvoidAreaType7+SystemBarPropertiesOrientation9+Rect7+AvoidArea7+Size7+WindowPropertiesColorSpace8+window.createWindow9+window.createWindow9+window.findWindow9+window.getLastWindow9+window.getLastWindow9+window.create(deprecated)window.create(deprecated)window.create(deprecated)window.create(deprecated)window.find(deprecated)window.find(deprecated)window.getTopWindow(deprecated)window.getTopWindow(deprecated)window.getTopWindow(deprecated)window.getTopWindow(deprecated)WindowshowWindow9+showWindow9+destroyWindow9+destroyWindow9+moveWindowTo9+moveWindowTo9+resize9+resize9+getWindowProperties9+getWindowAvoidArea9+setWindowLayoutFullScreen9+setWindowLayoutFullScreen9+setWindowSystemBarEnable9+setWindowSystemBarEnable9+setWindowSystemBarProperties9+setWindowSystemBarProperties9+setPreferredOrientation9+setPreferredOrientation9+setUIContent9+setUIContent9+loadContent9+loadContent9+isWindowShowing9+on('windowSizeChange')7+off('windowSizeChange')7+on('avoidAreaChange')9+off('avoidAreaChange')9+on('keyboardHeightChange')7+off('keyboardHeightChange')7+on('screenshot')9+off('screenshot')9+isWindowSupportWideGamut9+isWindowSupportWideGamut9+setWindowColorSpace9+setWindowColorSpace9+getWindowColorSpace9+setWindowBackgroundColor9+setWindowBrightness9+setWindowBrightness9+setWindowFocusable9+setWindowFocusable9+setWindowKeepScreenOn9+setWindowKeepScreenOn9+setWindowPrivacyMode9+setWindowPrivacyMode9+setWindowTouchable9+setWindowTouchable9+snapshot9+snapshot9+show(deprecated)show(deprecated)destroy(deprecated)destroy(deprecated)moveTo(deprecated)moveTo(deprecated)resetSize(deprecated)resetSize(deprecated)getProperties(deprecated)getProperties(deprecated)getAvoidArea(deprecated)getAvoidArea(deprecated)setFullScreen(deprecated)setFullScreen(deprecated)setLayoutFullScreen(deprecated)setLayoutFullScreen(deprecated)setSystemBarEnable(deprecated)setSystemBarEnable(deprecated)setSystemBarProperties(deprecated)setSystemBarProperties(deprecated)loadContent(deprecated)loadContent(deprecated)isShowing(deprecated)isShowing(deprecated)on('systemAvoidAreaChange')(deprecated)off('systemAvoidAreaChange')(deprecated)isSupportWideGamut(deprecated)isSupportWideGamut(deprecated)setColorSpace(deprecated)setColorSpace(deprecated)getColorSpace(deprecated)getColorSpace(deprecated)setBackgroundColor(deprecated)setBackgroundColor(deprecated)setBrightness(deprecated)setBrightness(deprecated)setDimBehind(deprecated)setDimBehind(deprecated)setFocusable(deprecated)setFocusable(deprecated)setKeepScreenOn(deprecated)setKeepScreenOn(deprecated)setOutsideTouchable(deprecated)setOutsideTouchable(deprecated)setPrivacyMode(deprecated)setPrivacyMode(deprecated)setTouchable(deprecated)setTouchable(deprecated)WindowStageEventType9+WindowStage9+getMainWindow9+getMainWindow9+getMainWindowSync9+createSubWindow9+createSubWindow9+getSubWindow9+getSubWindow9+loadContent9+loadContent9+loadContent9+on('windowStageEvent')9+off('windowStageEvent')9+@ohos.window (窗口) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
  窗口提供管理窗口的一些基础能力，包括对当前窗口的创建、销毁、各属性设置，以及对各窗口间的管理调度。 该模块提供以下窗口相关的常用功能：  Window：当前窗口实例，窗口管理器管理的基本单元。 WindowStage：窗口管理器。管理各个基本窗口单元。  
说明
 本模块首批接口从API version 6开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。 
  导入模块 已复制import window from '@ohos.window';   WindowType7+ 窗口类型枚举。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 值 说明    TYPE_APP 0 表示应用子窗口。 模型约束： 此接口仅可在FA模型下使用。   TYPE_SYSTEM_ALERT 1 表示系统告警窗口。   TYPE_FLOAT9+ 8 表示悬浮窗。 模型约束： 此接口仅可在Stage模型下使用。 需要权限： ohos.permission.SYSTEM_FLOAT_WINDOW      Configuration9+ 创建子窗口时的参数。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 类型 必填 说明    name string 是 窗口名字。   windowType WindowType 是 窗口类型。   ctx BaseContext 否 当前应用上下文信息。不设置，则默认为空。 FA模型下不需要使用该参数，即可创建子窗口。 Stage模型下需要使用该参数，用于创建系统窗口。   displayId number 否 当前物理屏幕id。不设置，则默认为-1。   parentId number 否 父窗口id。不设置，则默认为-1。      AvoidAreaType7+ 窗口内容需要规避区域的类型枚举。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 值 说明    TYPE_SYSTEM 0 表示系统默认区域。一般包括状态栏、导航栏，各设备系统定义可能不同。   TYPE_CUTOUT 1 表示刘海屏区域。   TYPE_SYSTEM_GESTURE9+ 2 表示手势区域。   TYPE_KEYBOARD9+ 3 表示软键盘区域。      SystemBarProperties 状态栏、导航栏的属性。 
说明
 当前HarmonyOS设备均不支持此接口，此接口在被setWindowSystemBarProperties()接口调用时将返回801错误码。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 类型 必填 说明    statusBarColor string 否 状态栏背景颜色，为十六进制RGB或ARGB颜色，不区分大小写，例如#00FF00或#FF00FF00。默认值：#0x66000000。   isStatusBarLightIcon7+ boolean 否 状态栏图标是否为高亮状态。true表示高亮；false表示不高亮。默认值：false。   statusBarContentColor8+ string 否 状态栏文字颜色。当设置此属性后， isStatusBarLightIcon属性设置无效。默认值：0xE5FFFFFF。   navigationBarColor string 否 导航栏背景颜色，为十六进制RGB或ARGB颜色，不区分大小写，例如#00FF00或#FF00FF00。默认值：#0x66000000。   isNavigationBarLightIcon7+ boolean 否 导航栏图标是否为高亮状态。true表示高亮；false表示不高亮。默认值：false。   navigationBarContentColor8+ string 否 导航栏文字颜色。当设置此属性后， isNavigationBarLightIcon属性设置无效。默认值：#0xE5FFFFFF。      Orientation9+ 窗口显示方向类型枚举。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 值 说明    UNSPECIFIED 0 表示未定义方向模式，由系统判定。   PORTRAIT 1 表示竖屏显示模式。   LANDSCAPE 2 表示横屏显示模式。   PORTRAIT_INVERTED 3 表示反向竖屏显示模式。   LANDSCAPE_INVERTED 4 表示反向横屏显示模式。   AUTO_ROTATION 5 表示传感器自动旋转模式。   AUTO_ROTATION_PORTRAIT 6 表示传感器自动竖向旋转模式。   AUTO_ROTATION_LANDSCAPE 7 表示传感器自动横向旋转模式。   AUTO_ROTATION_RESTRICTED 8 表示受开关控制的自动旋转模式。   AUTO_ROTATION_PORTRAIT_RESTRICTED 9 表示受开关控制的自动竖向旋转模式。   AUTO_ROTATION_LANDSCAPE_RESTRICTED 10 表示受开关控制的自动横向旋转模式。   LOCKED 11 表示锁定模式。      Rect7+ 窗口矩形区域。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 类型 可读 可写 说明    left number 是 是 矩形区域的左边界，单位为px。   top number 是 是 矩形区域的上边界，单位为px。   width number 是 是 矩形区域的宽度，单位为px。   height number 是 是 矩形区域的高度，单位为px。      AvoidArea7+ 窗口内容规避区域。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 类型 可读 可写 说明    visible9+ boolean 是 是 规避区域是否可见。true表示可见；false表示不可见。   leftRect Rect 是 是 屏幕左侧的矩形区。   topRect Rect 是 是 屏幕顶部的矩形区。   rightRect Rect 是 是 屏幕右侧的矩形区。   bottomRect Rect 是 是 屏幕底部的矩形区。      Size7+ 窗口大小。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 类型 可读 可写 说明    width number 是 是 窗口宽度，单位为px。   height number 是 是 窗口高度，单位为px。      WindowProperties 窗口属性。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 类型 可读 可写 说明    windowRect7+ Rect 是 是 窗口尺寸。   type7+ WindowType 是 是 窗口类型。   isFullScreen boolean 是 是 是否全屏，默认为false。true表示全屏；false表示非全屏。   isLayoutFullScreen7+ boolean 是 是 窗口是否为沉浸式，默认为false。true表示沉浸式；false表示非沉浸式。   focusable7+ boolean 是 否 窗口是否可聚焦，默认为true。true表示可聚焦；false表示不可聚焦。   touchable7+ boolean 是 否 窗口是否可触摸，默认为true。true表示可触摸；false表示不可触摸。   brightness number 是 是 屏幕亮度， 可设置的亮度范围为0~1，其中1表示最大亮度值。如果窗口没有设置亮度值，表示亮度跟随系统，此时获取到的亮度值为-1。   dimBehindValue(deprecated) number 是 是 靠后窗口的暗度值，取值范围为0~1，1表示最暗。 - 说明： 从API version 9开始废弃。 - 从 API version 7开始支持。   isKeepScreenOn boolean 是 是 屏幕是否常亮，默认为false。true表示常亮；false表示不常亮。   isPrivacyMode7+ boolean 是 是 隐私模式，默认为false。true表示模式开启；false表示模式关闭。   isRoundCorner(deprecated) boolean 是 是 窗口是否为圆角。默认为false。true表示圆角；false表示非圆角。 - 说明： 从API version 9开始废弃。 - 从 API version 7开始支持。   isTransparent7+ boolean 是 是 窗口是否透明。默认为false。true表示透明；false表示不透明。   id9+ number 是 否 窗口ID，默认值为0.0。      ColorSpace8+ 色域模式。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 值 说明    DEFAULT 0 默认SRGB色域模式。   WIDE_GAMUT 1 广色域模式。      window.createWindow9+ createWindow(config: Configuration, callback: AsyncCallback<Window>): void 创建子窗口，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    config Configuration 是 创建窗口时的参数。   callback AsyncCallback<Window> 是 回调函数。返回当前创建的窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300001 Repeated operation.   1300006 This window context is abnormal.    示例： 已复制let windowClass = null;let config = {name: "alertWindow", windowType: window.WindowType.TYPE_SYSTEM_ALERT, ctx: this.context};try {    window.createWindow(config, (err, data) => {        if (err.code) {            console.error('Failed to create the window. Cause: ' + JSON.stringify(err));            return;        }        windowClass = data;        console.info('Succeeded in creating the window. Data: ' + JSON.stringify(data));        windowClass.resize(500, 1000);    });} catch (exception) {    console.error('Failed to create the window. Cause: ' + JSON.stringify(exception));}   window.createWindow9+ createWindow(config: Configuration): Promise<Window> 创建子窗口，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    config Configuration 是 创建窗口时的参数。    返回值：    类型 说明  Promise<Window> Promise对象。返回当前创建的窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300001 Repeated operation.   1300006 This window context is abnormal.    示例： 已复制let windowClass = null;let config = {name: "alertWindow", windowType: window.WindowType.TYPE_SYSTEM_ALERT, ctx: this.context};try {    let promise = window.createWindow(config);    promise.then((data)=> {        windowClass = data;        console.info('Succeeded in creating the window. Data:' + JSON.stringify(data));    }).catch((err)=>{        console.error('Failed to create the Window. Cause:' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to create the window. Cause: ' + JSON.stringify(exception));}   window.findWindow9+ findWindow(name: string): Window 查找name所对应的窗口。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    name string 是 窗口id。    返回值：    类型 说明  Window 当前查找的窗口对象。    示例： 已复制let windowClass = null;try {    windowClass = window.findWindow('alertWindow');} catch (exception) {    console.error('Failed to find the Window. Cause: ' + JSON.stringify(exception));}   window.getLastWindow9+ getLastWindow(ctx: BaseContext, callback: AsyncCallback<Window>): void 获取当前应用内最上层的子窗口，若无应用子窗口，则返回应用主窗口，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    ctx BaseContext 是 当前应用上下文信息。   callback AsyncCallback<Window> 是 回调函数。返回当前应用内最后显示的窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300006 This window context is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';import window from '@ohos.window';
class myAbility extends UIAbility {  // ...  onWindowStageCreate(windowStage) {    console.log('onWindowStageCreate');    let windowClass = undefined;    try {      window.getLastWindow(this.context, (err, data) => {        if (err.code) {          console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));          return;        }        windowClass = data;        console.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));      });    } catch (exception) {      console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception));    }  }}   window.getLastWindow9+ getLastWindow(ctx: BaseContext): Promise<Window> 获取当前应用内最上层的子窗口，若无应用子窗口，则返回应用主窗口，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    ctx BaseContext 是 当前应用上下文信息。    返回值：    类型 说明  Promise<Window> Promise对象。返回当前应用内最后显示的窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300006 This window context is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';import window from '@ohos.window';
class myAbility extends UIAbility {  // ...  onWindowStageCreate(windowStage) {    console.log('onWindowStageCreate');    let windowClass = undefined;    try {      let promise = window.getLastWindow(this.context);      promise.then((data) => {        windowClass = data;        console.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));      }).catch((err) => {        console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));      });    } catch (exception) {      console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(exception));    }  };}   window.create(deprecated) create(id: string, type: WindowType, callback: AsyncCallback<Window>): void 创建子窗口，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用createWindow()。 
 模型约束： 此接口仅可在FA模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    id string 是 窗口id。   type WindowType 是 窗口类型。   callback AsyncCallback<Window> 是 回调函数。返回当前创建的子窗口对象。    示例： 已复制let windowClass = null;window.create('first', window.WindowType.TYPE_APP,(err,data) => {    if(err.code){        console.error('Failed to create the subWindow. Cause: ' + JSON.stringify(err));        return;    }    windowClass = data;    console.info('Succeeded in creating the subWindow. Data: ' + JSON.stringify(data));});   window.create(deprecated) create(id: string, type: WindowType): Promise<Window> 创建子窗口，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用createWindow()。 
 模型约束： 此接口仅可在FA模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    id string 是 窗口id。   type WindowType 是 窗口类型。    返回值：    类型 说明  Promise<Window> Promise对象。返回当前创建的子窗口对象。    示例： 已复制let windowClass = null;let promise = window.create('first', window.WindowType.TYPE_APP);promise.then((data)=> {    windowClass = data;    console.info('Succeeded in creating the subWindow. Data: ' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to create the subWindow. Cause: ' + JSON.stringify(err));});   window.create(deprecated) create(ctx: BaseContext, id: string, type: WindowType, callback: AsyncCallback<Window>): void 创建子窗口，使用callback异步回调。 当前此接口仅可在FA模型下使用。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用createWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    ctx BaseContext 是 当前应用上下文信息。   id string 是 窗口id。   type WindowType 是 窗口类型。   callback AsyncCallback<Window> 是 回调函数。返回当前创建的子窗口对象。    示例： 已复制let windowClass = null;window.create(this.context, 'alertWindow', window.WindowType.TYPE_SYSTEM_ALERT, (err, data) => {    if (err.code) {        console.error('Failed to create the window. Cause: ' + JSON.stringify(err));        return;    }    windowClass = data;    console.info('Succeeded in creating the window. Data: ' + JSON.stringify(data));    windowClass.resetSize(500, 1000);});   window.create(deprecated) create(ctx: BaseContext, id: string, type: WindowType): Promise<Window> 创建子窗口，使用Promise异步回调。 当前此接口仅可在FA模型下使用。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用createWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    ctx BaseContext 是 当前应用上下文信息。   id string 是 窗口id。   type WindowType 是 窗口类型。    返回值：    类型 说明  Promise<Window> Promise对象。返回当前创建的子窗口对象。    示例： 已复制let windowClass = null;let promise = window.create(this.context, 'alertWindow', window.WindowType.TYPE_SYSTEM_ALERT);promise.then((data)=> {    windowClass = data;    console.info('Succeeded in creating the window. Data:' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to create the Window. Cause:' + JSON.stringify(err));});   window.find(deprecated) find(id: string, callback: AsyncCallback<Window>): void 查找id所对应的窗口，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用findWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    id string 是 窗口id。   callback AsyncCallback<Window> 是 回调函数。返回当前查找到的窗口对象。    示例： 已复制let windowClass = null;window.find('alertWindow', (err, data) => {    if (err.code) {        console.error('Failed to find the Window. Cause: ' + JSON.stringify(err));        return;    }    windowClass = data;    console.info('Succeeded in finding the window. Data: ' + JSON.stringify(data));});   window.find(deprecated) find(id: string): Promise<Window> 查找id所对应的窗口，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用findWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    id string 是 窗口id。    返回值：    类型 说明  Promise<Window> Promise对象。返回当前查找的窗口对象。    示例： 已复制let windowClass = null;let promise = window.find('alertWindow');promise.then((data)=> {    windowClass = data;    console.info('Succeeded in finding the window. Data: ' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to find the Window. Cause: ' + JSON.stringify(err));});   window.getTopWindow(deprecated) getTopWindow(callback: AsyncCallback<Window>): void 获取当前应用内最后显示的窗口，使用callback异步回调。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用getLastWindow()。 
 模型约束： 此接口仅可在FA模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<Window> 是 回调函数。返回当前应用内最后显示的窗口对象。    示例： 已复制let windowClass = null;window.getTopWindow((err, data) => {    if (err.code) {        console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));        return;    }    windowClass = data;    console.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));});   window.getTopWindow(deprecated) getTopWindow(): Promise<Window> 获取当前应用内最后显示的窗口，使用Promise异步回调。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用getLastWindow()。 
 模型约束： 此接口仅可在FA模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<Window> Promise对象。返回当前应用内最后显示的窗口对象。    示例： 已复制let windowClass = null;let promise = window.getTopWindow();promise.then((data)=> {    windowClass = data;    console.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));});   window.getTopWindow(deprecated) getTopWindow(ctx: BaseContext, callback: AsyncCallback<Window>): void 获取当前应用内最后显示的窗口，使用callback异步回调。 
说明
 从 API version 8开始支持，从API version 9开始废弃，推荐使用getLastWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    ctx BaseContext 是 当前应用上下文信息。   callback AsyncCallback<Window> 是 回调函数。返回当前应用内最后显示的窗口对象。    示例： 已复制let windowClass = null;window.getTopWindow(this.context, (err, data) => {    if (err.code) {        console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));        return;    }    windowClass = data;    console.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));});   window.getTopWindow(deprecated) getTopWindow(ctx: BaseContext): Promise<Window> 获取当前应用内最后显示的窗口，使用Promise异步回调。 
说明
 从 API version 8开始支持，从API version 9开始废弃，推荐使用getLastWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    ctx BaseContext 是 当前应用上下文信息。    返回值：    类型 说明  Promise<Window> Promise对象。返回当前应用内最后显示的窗口对象。    示例： 已复制let windowClass = null;let promise = window.getTopWindow(this.context);promise.then((data)=> {     windowClass = data;    console.info('Succeeded in obtaining the top window. Data: ' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(err));});   Window 当前窗口实例，窗口管理器管理的基本单元。 下列API示例中都需先使用getLastWindow()、createWindow()、findWindow()中的任一方法获取到Window实例，再通过此实例调用对应方法。   showWindow9+ showWindow(callback: AsyncCallback<void>): void 显示当前窗口，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制windowClass.showWindow((err) => {    if (err.code) {        console.error('Failed to show the window. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in showing the window.');});   showWindow9+ showWindow(): Promise<void> 显示当前窗口，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let promise = windowClass.showWindow();promise.then(()=> {    console.info('Succeeded in showing the window.');}).catch((err)=>{    console.error('Failed to show the window. Cause: ' + JSON.stringify(err));});   destroyWindow9+ destroyWindow(callback: AsyncCallback<void>): void 销毁当前窗口，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制windowClass.destroyWindow((err) => {    if (err.code) {        console.error('Failed to destroy the window. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in destroying the window.');});   destroyWindow9+ destroyWindow(): Promise<void> 销毁当前窗口，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let promise = windowClass.destroyWindow();promise.then(()=> {    console.info('Succeeded in destroying the window.');}).catch((err)=>{    console.error('Failed to destroy the window. Cause: ' + JSON.stringify(err));});   moveWindowTo9+ moveWindowTo(x: number, y: number, callback: AsyncCallback<void>): void 移动窗口位置，使用callback异步回调。 全屏模式窗口不支持该操作。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    x number 是 窗口在x轴方向移动的值，值为正表示右移，单位为px。   y number 是 窗口在y轴方向移动的值，值为正表示下移，单位为px。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制try {    windowClass.moveWindowTo(300, 300, (err)=>{        if (err.code) {            console.error('Failed to move the window. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in moving the window.');    });} catch (exception) {    console.error('Failed to move the window. Cause:' + JSON.stringify(exception));}   moveWindowTo9+ moveWindowTo(x: number, y: number): Promise<void> 移动窗口位置，使用Promise异步回调。 全屏模式窗口不支持该操作。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    x number 是 窗口在x轴方向移动的值，值为正表示右移，单位为px。   y number 是 窗口在y轴方向移动的值，值为正表示下移，单位为px。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制try {    let promise = windowClass.moveWindowTo(300, 300);    promise.then(()=> {        console.info('Succeeded in moving the window.');    }).catch((err)=>{        console.error('Failed to move the window. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to move the window. Cause:' + JSON.stringify(exception));}   resize9+ resize(width: number, height: number, callback: AsyncCallback<void>): void 改变当前窗口大小，使用callback异步回调。 应用主窗口与子窗口存在大小限制，宽度范围：[320, 2560]，高度范围：[240, 2560]，单位为vp。 系统窗口存在大小限制，宽度范围：[0, 2560]，高度范围：[0, 2560]，单位为vp。 设置的宽度与高度受到此约束限制，规则： 若所设置的窗口宽/高尺寸小于窗口最小宽/高限值，则窗口最小宽/高限值生效； 若所设置的窗口宽/高尺寸大于窗口最大宽/高限值，则窗口最大宽/高限值生效。 全屏模式窗口不支持该操作。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    width number 是 目标窗口的宽度，单位为px。   height number 是 目标窗口的高度，单位为px。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制try {    windowClass.resize(500, 1000, (err) => {        if (err.code) {            console.error('Failed to change the window size. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in changing the window size.');    });} catch (exception) {    console.error('Failed to change the window size. Cause:' + JSON.stringify(exception));}   resize9+ resize(width: number, height: number): Promise<void> 改变当前窗口大小，使用Promise异步回调。 应用主窗口与子窗口存在大小限制，宽度范围：[320, 2560]，高度范围：[240, 2560]，单位为vp。 系统窗口存在大小限制，宽度范围：[0, 2560]，高度范围：[0, 2560]，单位为vp。 设置的宽度与高度受到此约束限制，规则： 若所设置的窗口宽/高尺寸小于窗口最小宽/高限值，则窗口最小宽/高限值生效； 若所设置的窗口宽/高尺寸大于窗口最大宽/高限值，则窗口最大宽/高限值生效。 全屏模式窗口不支持该操作。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    width number 是 目标窗口的宽度，单位为px。   height number 是 目标窗口的高度，单位为px。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制try {    let promise = windowClass.resize(500, 1000);    promise.then(()=> {        console.info('Succeeded in changing the window size.');    }).catch((err)=>{        console.error('Failed to change the window size. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to change the window size. Cause: ' + JSON.stringify(exception));}   getWindowProperties9+ getWindowProperties(): WindowProperties 获取当前窗口的属性，返回WindowProperties。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  WindowProperties 当前窗口属性。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制try {    let properties = windowClass.getWindowProperties();} catch (exception) {    console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));}   getWindowAvoidArea9+ getWindowAvoidArea(type: AvoidAreaType): AvoidArea 获取窗口内容规避的区域；如系统栏区域、刘海屏区域、手势区域、软键盘区域等与窗口内容重叠时，需要窗口内容避让的区域。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type AvoidAreaType 是 表示规避区类型。    返回值：    类型 说明  AvoidArea 窗口内容规避区域。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let type = window.AvoidAreaType.TYPE_SYSTEM;try {    let avoidArea = windowClass.getWindowAvoidArea(type);} catch (exception) {    console.error('Failed to obtain the area. Cause:' + JSON.stringify(exception));}   setWindowLayoutFullScreen9+ setWindowLayoutFullScreen(isLayoutFullScreen: boolean, callback: AsyncCallback<void>): void 设置窗口的布局是否为全屏显示状态，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isLayoutFullScreen boolean 是 窗口的布局是否为全屏显示状态（该全屏状态下状态栏、导航栏仍然显示）。true表示全屏显示；false表示非全屏显示。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let isLayoutFullScreen= true;try {    windowClass.setWindowLayoutFullScreen(isLayoutFullScreen, (err) => {        if (err.code) {            console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting the window layout to full-screen mode.');    });} catch (exception) {    console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(exception));}   setWindowLayoutFullScreen9+ setWindowLayoutFullScreen(isLayoutFullScreen: boolean): Promise<void> 设置窗口的布局是否为全屏显示状态，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isLayoutFullScreen boolean 是 窗口的布局是否为全屏显示状态(该全屏状态下状态栏、导航栏仍然显示)。true表示全屏显示；false表示非全屏显示。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let isLayoutFullScreen = true;try {    let promise = windowClass.setWindowLayoutFullScreen(isLayoutFullScreen);    promise.then(()=> {        console.info('Succeeded in setting the window layout to full-screen mode.');    }).catch((err)=>{        console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(exception));}   setWindowSystemBarEnable9+ setWindowSystemBarEnable(names: Array<'status' | 'navigation'>, callback: AsyncCallback<void>): void 设置导航栏、状态栏的可见模式，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    names Array<'status'|'navigation'> 是 设置状态栏和导航栏是否显示。 例如，需全部显示，该参数设置为['status', 'navigation']；不设置，则默认不显示。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制// 此处以不显示导航栏、状态栏为例let names = [];try {    windowClass.setWindowSystemBarEnable(names, (err) => {        if (err.code) {            console.error('Failed to set the system bar to be invisible. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting the system bar to be invisible.');    });} catch (exception) {    console.error('Failed to set the system bar to be invisible. Cause:' + JSON.stringify(exception));}   setWindowSystemBarEnable9+ setWindowSystemBarEnable(names: Array<'status' | 'navigation'>): Promise<void> 设置导航栏、状态栏的可见模式，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    names Array<'status'|'navigation'> 是 设置状态栏和导航栏是否显示。 例如，需全部显示，该参数设置为['status', 'navigation']；不设置，则默认不显示。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制// 此处以不显示导航栏、状态栏为例let names = [];try {    let promise = windowClass.setWindowSystemBarEnable(names);    promise.then(()=> {        console.info('Succeeded in setting the system bar to be invisible.');    }).catch((err)=>{        console.error('Failed to set the system bar to be invisible. Cause:' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set the system bar to be invisible. Cause:' + JSON.stringify(exception));}   setWindowSystemBarProperties9+ setWindowSystemBarProperties(systemBarProperties: SystemBarProperties, callback: AsyncCallback<void>): void 设置窗口内导航栏、状态栏的属性，使用callback异步回调。 
说明
 当前HarmonyOS设备均不支持此接口，应用调用此接口将返回801错误码。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    SystemBarProperties SystemBarProperties 是 导航栏、状态栏的属性。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let SystemBarProperties = {    statusBarColor: '#ff00ff',    navigationBarColor: '#00ff00',    //以下两个属性从API Version8开始支持    statusBarContentColor:'#ffffff',    navigationBarContentColor:'#00ffff'};try {    windowClass.setWindowSystemBarProperties(SystemBarProperties, (err) => {        if (err.code) {            console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting the system bar properties.');    });} catch (exception) {    console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(exception));}   setWindowSystemBarProperties9+ setWindowSystemBarProperties(systemBarProperties: SystemBarProperties): Promise<void> 设置窗口内导航栏、状态栏的属性，使用Promise异步回调。 
说明
 当前HarmonyOS设备均不支持此接口，应用调用此接口将返回801错误码。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    SystemBarProperties SystemBarProperties 是 导航栏、状态栏的属性。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let SystemBarProperties = {    statusBarColor: '#ff00ff',    navigationBarColor: '#00ff00',    //以下两个属性从API Version8开始支持    statusBarContentColor:'#ffffff',    navigationBarContentColor:'#00ffff'};try {    let promise = windowClass.setWindowSystemBarProperties(SystemBarProperties);    promise.then(()=> {        console.info('Succeeded in setting the system bar properties.');    }).catch((err)=>{        console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(exception));}   setPreferredOrientation9+ setPreferredOrientation(orientation: Orientation, callback: AsyncCallback<void>): void 设置窗口的显示方向属性，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    Orientation Orientation 是 窗口显示方向的属性。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let orientation = window.Orientation.AUTO_ROTATION;try {    windowClass.setPreferredOrientation(orientation, (err) => {        if (err.code) {            console.error('Failed to set window orientation. Cause: ' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting window orientation.');    });} catch (exception) {    console.error('Failed to set window orientation. Cause: ' + JSON.stringify(exception));}   setPreferredOrientation9+ setPreferredOrientation(orientation: Orientation): Promise<void> 设置窗口的显示方向属性，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    Orientation Orientation 是 窗口显示方向的属性。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let orientation = window.Orientation.AUTO_ROTATION;try {    let promise = windowClass.setPreferredOrientation(orientation);    promise.then(()=> {        console.info('Succeeded in setting the window orientation.');    }).catch((err)=>{        console.error('Failed to set the window orientation. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set window orientation. Cause: ' + JSON.stringify(exception));}   setUIContent9+ setUIContent(path: string, callback: AsyncCallback<void>): void 为当前窗口加载具体页面内容，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，Stage模型下该路径需添加到工程的main_pages.json文件中，FA模型下该路径需添加到工程的config.json文件中。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制try {    windowClass.setUIContent('pages/page2/page2', (err) => {    if (err.code) {            console.error('Failed to load the content. Cause:' + JSON.stringify(err));            return;    }    console.info('Succeeded in loading the content.');    });} catch (exception) {    console.error('Failed to load the content. Cause:' + JSON.stringify(exception));}   setUIContent9+ setUIContent(path: string): Promise<void> 为当前窗口加载具体页面内容，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，Stage模型下该路径需添加到工程的main_pages.json文件中，FA模型下该路径需添加到工程的config.json文件中。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制try {    let promise = windowClass.setUIContent('pages/page2/page2');    promise.then(()=> {        console.info('Succeeded in loading the content.');    }).catch((err)=>{        console.error('Failed to load the content. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to load the content. Cause: ' + JSON.stringify(exception));}   loadContent9+ loadContent(path: string, storage: LocalStorage, callback: AsyncCallback<void>): void 为当前窗口加载与LocalStorage相关联的具体页面内容，使用callback异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，该路径需添加到工程的main_pages.json文件中。   storage LocalStorage 是 存储单元，为应用程序范围内的可变状态属性和非可变状态属性提供存储。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let storage = new LocalStorage();storage.setOrCreate('storageSimpleProp',121);console.log('onWindowStageCreate');try {    windowClass.loadContent('pages/page2', storage, (err) => {        if (err.code) {            console.error('Failed to load the content. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in loading the content.');    });} catch (exception) {    console.error('Failed to load the content. Cause:' + JSON.stringify(exception));}   loadContent9+ loadContent(path: string, storage: LocalStorage): Promise<void> 为当前窗口加载与LocalStorage相关联的具体页面内容，使用Promise异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，该路径需添加到工程的main_pages.json文件中。   storage LocalStorage 是 存储单元，为应用程序范围内的可变状态属性和非可变状态属性提供存储。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let storage = new LocalStorage();storage.setOrCreate('storageSimpleProp',121);console.log('onWindowStageCreate');try {    let promise = windowClass.loadContent('pages/page2', storage);    promise.then(() => {        console.info('Succeeded in loading the content.');    }).catch((err) => {        console.error('Failed to load the content. Cause:' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to load the content. Cause:' + JSON.stringify(exception));}   isWindowShowing9+ isWindowShowing(): boolean 判断当前窗口是否已显示。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  boolean 当前窗口是否已显示。true表示当前窗口已显示，false则表示当前窗口未显示。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制try {    let data = windowClass.isWindowShowing();    console.info('Succeeded in checking whether the window is showing. Data: ' + JSON.stringify(data));} catch (exception) {    console.error('Failed to check whether the window is showing. Cause: ' + JSON.stringify(exception));}   on('windowSizeChange')7+ on(type: 'windowSizeChange', callback: Callback<Size>): void 开启窗口尺寸变化的监听。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'windowSizeChange'，即窗口尺寸变化事件。   callback Callback<Size> 是 回调函数。返回当前的窗口尺寸。    示例： 已复制try {    windowClass.on('windowSizeChange', (data) => {        console.info('Succeeded in enabling the listener for window size changes. Data: ' + JSON.stringify(data));    });} catch (exception) {    console.error('Failed to enable the listener for window size changes. Cause: ' + JSON.stringify(exception));}   off('windowSizeChange')7+ off(type: 'windowSizeChange', callback?: Callback<Size>): void 关闭窗口尺寸变化的监听。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'windowSizeChange'，即窗口尺寸变化事件。   callback Callback<Size> 否 回调函数。返回当前的窗口尺寸。    示例： 已复制try {    windowClass.off('windowSizeChange');} catch (exception) {    console.error('Failed to disable the listener for window size changes. Cause: ' + JSON.stringify(exception));}   on('avoidAreaChange')9+ on(type: 'avoidAreaChange', callback: Callback<{type: AvoidAreaType, area: AvoidArea}>): void 开启系统规避区变化的监听。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'avoidAreaChange'，即系统规避区变化事件。   callback Callback<{type: AvoidAreaType, area: AvoidArea}> 是 回调函数。返回当前规避区以及规避区类型。    示例： 已复制try {    windowClass.on('avoidAreaChange', (data) => {        console.info('Succeeded in enabling the listener for system avoid area changes. type:' +            JSON.stringify(data.type) + ', area: ' + JSON.stringify(data.area));    });} catch (exception) {    console.error('Failed to enable the listener for system avoid area changes. Cause: ' + JSON.stringify(exception));}   off('avoidAreaChange')9+ off(type: 'avoidAreaChange', callback?: Callback<{type: AvoidAreaType, area: AvoidArea}>): void 关闭系统规避区变化的监听。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'avoidAreaChange'，即系统规避区变化事件。   callback Callback<{type: AvoidAreaType, area: AvoidArea}> 否 回调函数。返回当前规避区以及规避区类型。    示例： 已复制try {    windowClass.off('avoidAreaChange');} catch (exception) {    console.error('Failed to disable the listener for system avoid area changes. Cause: ' + JSON.stringify(exception));}   on('keyboardHeightChange')7+ on(type: 'keyboardHeightChange', callback: Callback<number>): void 开启键盘高度变化的监听。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'keyboardHeightChange'，即键盘高度变化事件。   callback Callback<number> 是 回调函数。返回当前的键盘高度。    示例： 已复制try {    windowClass.on('keyboardHeightChange', (data) => {        console.info('Succeeded in enabling the listener for keyboard height changes. Data: ' + JSON.stringify(data));    });} catch (exception) {    console.error('Failed to enable the listener for keyboard height changes. Cause: ' + JSON.stringify(exception));}   off('keyboardHeightChange')7+ off(type: 'keyboardHeightChange', callback?: Callback<number>): void 关闭键盘高度变化的监听。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'keyboardHeightChange'，即键盘高度变化事件。   callback Callback<number> 否 回调函数。返回当前的键盘高度。    示例： 已复制try {    windowClass.off('keyboardHeightChange');} catch (exception) {    console.error('Failed to disable the listener for keyboard height changes. Cause: ' + JSON.stringify(exception));}   on('screenshot')9+ on(type: 'screenshot', callback: Callback<void>): void 开启截屏事件的监听。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'screenshot'，即截屏事件。   callback Callback<void> 是 回调函数。发生截屏事件时的回调。    示例： 已复制try {    windowClass.on('screenshot', () => {        console.info('screenshot happened');    });} catch (exception) {    console.error('Failed to register callback. Cause: ' + JSON.stringify(exception));}   off('screenshot')9+ off(type: 'screenshot', callback?: Callback<void>): void 关闭截屏事件的监听。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'screenshot'，即截屏事件。   callback Callback<void> 否 回调函数。发生截屏事件时的回调。    示例： 已复制let callback = () => {    console.info('screenshot happened');};try {    windowClass.on('screenshot', callback);} catch (exception) {    console.error('Failed to register callback. Cause: ' + JSON.stringify(exception));}try {    windowClass.off('screenshot', callback);    // 如果通过on开启多个callback进行监听，同时关闭所有监听：    windowClass.off('screenshot');} catch (exception) {    console.error('Failed to unregister callback. Cause: ' + JSON.stringify(exception));}   isWindowSupportWideGamut9+ isWindowSupportWideGamut(callback: AsyncCallback<boolean>): void 判断当前窗口是否支持广色域模式，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<boolean> 是 回调函数。返回true表示当前窗口支持广色域模式，返回false表示当前窗口不支持广色域模式。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制windowClass.isWindowSupportWideGamut((err, data) => {    if (err.code) {        console.error('Failed to check whether the window support WideGamut. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in checking whether the window support WideGamut Data: ' + JSON.stringify(data));});   isWindowSupportWideGamut9+ isWindowSupportWideGamut(): Promise<boolean> 判断当前窗口是否支持广色域模式，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<boolean> Promise对象。返回true表示当前窗口支持广色域模式，返回false表示当前窗口不支持广色域模式。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let promise = windowClass.isWindowSupportWideGamut();promise.then((data)=> {    console.info('Succeeded in checking whether the window support WideGamut. Data: ' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to check whether the window support WideGamut. Cause: ' + JSON.stringify(err));});   setWindowColorSpace9+ setWindowColorSpace(colorSpace:ColorSpace, callback: AsyncCallback<void>): void 设置当前窗口为广色域模式或默认色域模式，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    colorSpace ColorSpace 是 设置色域模式。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制try {    windowClass.setWindowColorSpace(window.ColorSpace.WIDE_GAMUT, (err) => {        if (err.code) {            console.error('Failed to set window colorspace. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting window colorspace.');    });} catch (exception) {    console.error('Failed to set window colorspace. Cause:' + JSON.stringify(exception));}   setWindowColorSpace9+ setWindowColorSpace(colorSpace:ColorSpace): Promise<void> 设置当前窗口为广色域模式或默认色域模式，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    colorSpace ColorSpace 是 设置色域模式。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制try {    let promise = windowClass.setWindowColorSpace(window.ColorSpace.WIDE_GAMUT);    promise.then(()=> {        console.info('Succeeded in setting window colorspace.');    }).catch((err)=>{        console.error('Failed to set window colorspace. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set window colorspace. Cause:' + JSON.stringify(exception));}   getWindowColorSpace9+ getWindowColorSpace(): ColorSpace 获取当前窗口色域模式。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  ColorSpace 当前色域模式。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let colorSpace = windowClass.getWindowColorSpace();   setWindowBackgroundColor9+ setWindowBackgroundColor(color: string): void 设置窗口的背景色。Stage模型下，该接口需要在loadContent或setUIContent之后使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    color string 是 需要设置的背景色，为十六进制RGB或ARGB颜色，不区分大小写，例如#00FF00或#FF00FF00。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制private SetUIContent(windowClass) {    windowClass.setUIContent("pages/ButtonWindow",(err) => {      if (err.code) {        console.error('Failed to load the content. Cause:' + JSON.stringify(err));        return;      }      console.info('Succeeded in loading the content.');      let color: string = '#00ff33';      try {        windowClass.setWindowBackgroundColor(color);      } catch (exception) {        console.error('Failed to set the background color. Cause: ' + JSON.stringify(exception));      };    });}   setWindowBrightness9+ setWindowBrightness(brightness: number, callback: AsyncCallback<void>): void 设置屏幕亮度值，使用callback异步回调。 当前屏幕亮度规格：窗口设置屏幕亮度生效时，控制中心不可以调整系统屏幕亮度，窗口恢复默认系统亮度之后，控制中心可以调整系统屏幕亮度。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    brightness number 是 屏幕亮度值，值为0-1之间。1表示最亮。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let brightness = 1;try {    windowClass.setWindowBrightness(brightness, (err) => {        if (err.code) {            console.error('Failed to set the brightness. Cause: ' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting the brightness.');    });} catch (exception) {    console.error('Failed to set the brightness. Cause: ' + JSON.stringify(exception));}   setWindowBrightness9+ setWindowBrightness(brightness: number): Promise<void> 设置屏幕亮度值，使用Promise异步回调。 当前屏幕亮度规格：窗口设置屏幕亮度生效时，控制中心不可以调整系统屏幕亮度，窗口恢复默认系统亮度之后，控制中心可以调整系统屏幕亮度。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    brightness number 是 屏幕亮度值，值为0-1之间。1表示最亮。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let brightness = 1;try {    let promise = windowClass.setWindowBrightness(brightness);    promise.then(()=> {        console.info('Succeeded in setting the brightness.');    }).catch((err)=>{        console.error('Failed to set the brightness. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set the brightness. Cause: ' + JSON.stringify(exception));}   setWindowFocusable9+ setWindowFocusable(isFocusable: boolean, callback: AsyncCallback<void>): void 设置点击时是否支持切换焦点窗口，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isFocusable boolean 是 点击时是否支持切换焦点窗口。true表示支持；false表示不支持。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let isFocusable = true;try {    windowClass.setWindowFocusable(isFocusable, (err) => {        if (err.code) {            console.error('Failed to set the window to be focusable. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting the window to be focusable.');    });} catch (exception) {    console.error('Failed to set the window to be focusable. Cause:' + JSON.stringify(exception));}   setWindowFocusable9+ setWindowFocusable(isFocusable: boolean): Promise<void> 设置点击时是否支持切换焦点窗口，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isFocusable boolean 是 点击时是否支持切换焦点窗口。true表示支持；false表示不支持。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let isFocusable = true;try {    let promise = windowClass.setWindowFocusable(isFocusable);    promise.then(()=> {        console.info('Succeeded in setting the window to be focusable.');    }).catch((err)=>{        console.error('Failed to set the window to be focusable. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set the window to be focusable. Cause:' + JSON.stringify(exception));}   setWindowKeepScreenOn9+ setWindowKeepScreenOn(isKeepScreenOn: boolean, callback: AsyncCallback<void>): void 设置屏幕是否为常亮状态，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isKeepScreenOn boolean 是 设置屏幕是否为常亮状态。true表示常亮；false表示不常亮。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let isKeepScreenOn = true;try {    windowClass.setWindowKeepScreenOn(isKeepScreenOn, (err) => {        if (err.code) {            console.error('Failed to set the screen to be always on. Cause: ' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting the screen to be always on.');    });} catch (exception) {    console.error('Failed to set the screen to be always on. Cause: ' + JSON.stringify(exception));}   setWindowKeepScreenOn9+ setWindowKeepScreenOn(isKeepScreenOn: boolean): Promise<void> 设置屏幕是否为常亮状态，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isKeepScreenOn boolean 是 设置屏幕是否为常亮状态。true表示常亮；false表示不常亮。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let isKeepScreenOn = true;try {    let promise = windowClass.setWindowKeepScreenOn(isKeepScreenOn);    promise.then(() => {        console.info('Succeeded in setting the screen to be always on.');    }).catch((err)=>{        console.info('Failed to set the screen to be always on. Cause:  ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set the screen to be always on. Cause: ' + JSON.stringify(exception));}   setWindowPrivacyMode9+ setWindowPrivacyMode(isPrivacyMode: boolean, callback: AsyncCallback<void>): void 设置窗口是否为隐私模式，使用callback异步回调。设置为隐私模式的窗口，窗口内容将无法被截屏或录屏。此接口可用于禁止截屏/录屏的场景。 系统能力： SystemCapability.WindowManager.WindowManager.Core 需要权限： ohos.permission.PRIVACY_WINDOW 参数：     参数名 类型 必填 说明    isPrivacyMode boolean 是 窗口是否为隐私模式。true表示模式开启；false表示模式关闭。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let isPrivacyMode = true;try {    windowClass.setWindowPrivacyMode(isPrivacyMode, (err) => {        if (err.code) {            console.error('Failed to set the window to privacy mode. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting the window to privacy mode.');    });} catch (exception) {    console.error('Failed to set the window to privacy mode. Cause:' + JSON.stringify(exception));}   setWindowPrivacyMode9+ setWindowPrivacyMode(isPrivacyMode: boolean): Promise<void> 设置窗口是否为隐私模式，使用Promise异步回调。设置为隐私模式的窗口，窗口内容将无法被截屏或录屏。此接口可用于禁止截屏/录屏的场景。 系统能力： SystemCapability.WindowManager.WindowManager.Core 需要权限： ohos.permission.PRIVACY_WINDOW 参数：     参数名 类型 必填 说明    isPrivacyMode boolean 是 窗口是否为隐私模式。true表示模式开启；false表示模式关闭。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let isPrivacyMode = true;try {    let promise = windowClass.setWindowPrivacyMode(isPrivacyMode);    promise.then(()=> {        console.info('Succeeded in setting the window to privacy mode.');    }).catch((err)=>{        console.error('Failed to set the window to privacy mode. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set the window to privacy mode. Cause:' + JSON.stringify(exception));}   setWindowTouchable9+ setWindowTouchable(isTouchable: boolean, callback: AsyncCallback<void>): void 设置窗口是否为可触状态，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isTouchable boolean 是 窗口是否为可触状态。true表示可触；false表示不可触。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let isTouchable = true;try {    windowClass.setWindowTouchable(isTouchable, (err) => {        if (err.code) {            console.error('Failed to set the window to be touchable. Cause:' + JSON.stringify(err));            return;        }        console.info('Succeeded in setting the window to be touchable.');    });} catch (exception) {    console.error('Failed to set the window to be touchable. Cause:' + JSON.stringify(exception));}   setWindowTouchable9+ setWindowTouchable(isTouchable: boolean): Promise<void> 设置窗口是否为可触状态，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isTouchable boolean 是 窗口是否为可触状态。true表示可触；false表示不可触。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300003 This window manager service works abnormally.    示例： 已复制let isTouchable = true;try {    let promise = windowClass.setWindowTouchable(isTouchable);    promise.then(()=> {        console.info('Succeeded in setting the window to be touchable.');    }).catch((err)=>{        console.error('Failed to set the window to be touchable. Cause: ' + JSON.stringify(err));    });} catch (exception) {    console.error('Failed to set the window to be touchable. Cause:' + JSON.stringify(exception));}   snapshot9+ snapshot(callback: AsyncCallback<image.PixelMap>): void 获取窗口截图，使用callback异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<image.PixelMap> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制windowClass.snapshot((err, pixelMap) => {    if (err.code) {        console.error('Failed to snapshot window. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in snapshotting window. Pixel bytes number: ' + pixelMap.getPixelBytesNumber());    pixelMap.release(); // PixelMap使用完后及时释放内存});   snapshot9+ snapshot(): Promise<image.PixelMap> 获取窗口截图，使用Promise异步回调。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<image.PixelMap> Promise对象。返回当前窗口截图。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.    示例： 已复制let promise = windowClass.snapshot();promise.then((pixelMap)=> {    console.info('Succeeded in snapshotting window. Pixel bytes number: ' + pixelMap.getPixelBytesNumber());    pixelMap.release(); // PixelMap使用完后及时释放内存}).catch((err)=>{    console.error('Failed to snapshot window. Cause:' + JSON.stringify(err));});   show(deprecated) show(callback: AsyncCallback<void>): void 显示当前窗口，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用showWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<void> 是 回调函数。    示例： 已复制windowClass.show((err) => {    if (err.code) {        console.error('Failed to show the window. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in showing the window.');});   show(deprecated) show(): Promise<void> 显示当前窗口，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用showWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let promise = windowClass.show();promise.then(()=> {    console.info('Succeeded in showing the window.');}).catch((err)=>{    console.error('Failed to show the window. Cause: ' + JSON.stringify(err));});   destroy(deprecated) destroy(callback: AsyncCallback<void>): void 销毁当前窗口，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用destroyWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<void> 是 回调函数。    示例： 已复制windowClass.destroy((err) => {    if (err.code) {        console.error('Failed to destroy the window. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in destroying the window.');});   destroy(deprecated) destroy(): Promise<void> 销毁当前窗口，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用destroyWindow()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let promise = windowClass.destroy();promise.then(()=> {    console.info('Succeeded in destroying the window.');}).catch((err)=>{    console.error('Failed to destroy the window. Cause: ' + JSON.stringify(err));});   moveTo(deprecated) moveTo(x: number, y: number, callback: AsyncCallback<void>): void 移动窗口位置，使用callback异步回调。 全屏模式窗口不支持该操作。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用moveWindowTo()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    x number 是 窗口在x轴方向移动的值，值为正表示右移，单位为px。   y number 是 窗口在y轴方向移动的值，值为正表示下移，单位为px。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制windowClass.moveTo(300, 300, (err)=>{    if (err.code) {        console.error('Failed to move the window. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in moving the window.');});   moveTo(deprecated) moveTo(x: number, y: number): Promise<void> 移动窗口位置，使用Promise异步回调。 全屏模式窗口不支持该操作。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用moveWindowTo()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    x number 是 窗口在x轴方向移动的值，值为正表示右移，单位为px。   y number 是 窗口在y轴方向移动的值，值为正表示下移，单位为px。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let promise = windowClass.moveTo(300, 300);promise.then(()=> {    console.info('Succeeded in moving the window.');}).catch((err)=>{    console.error('Failed to move the window. Cause: ' + JSON.stringify(err));});   resetSize(deprecated) resetSize(width: number, height: number, callback: AsyncCallback<void>): void 改变当前窗口大小，使用callback异步回调。 应用主窗口与子窗口存在大小限制，宽度范围：[320, 2560]，高度范围：[240, 2560]，单位为vp。 系统窗口存在大小限制，宽度范围：[0, 2560]，高度范围：[0, 2560]，单位为vp。 设置的宽度与高度受到此约束限制，规则： 若所设置的窗口宽/高尺寸小于窗口最小宽/高限值，则窗口最小宽/高限值生效； 若所设置的窗口宽/高尺寸大于窗口最大宽/高限值，则窗口最大宽/高限值生效。 全屏模式窗口不支持该操作。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用resize()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    width number 是 目标窗口的宽度，单位为px。   height number 是 目标窗口的高度，单位为px。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制windowClass.resetSize(500, 1000, (err) => {    if (err.code) {        console.error('Failed to change the window size. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in changing the window size.');});   resetSize(deprecated) resetSize(width: number, height: number): Promise<void> 改变当前窗口大小，使用Promise异步回调。 应用主窗口与子窗口存在大小限制，宽度范围：[320, 2560]，高度范围：[240, 2560]，单位为vp。 系统窗口存在大小限制，宽度范围：[0, 2560]，高度范围：[0, 2560]，单位为vp。 设置的宽度与高度受到此约束限制，规则： 若所设置的窗口宽/高尺寸小于窗口最小宽/高限值，则窗口最小宽/高限值生效； 若所设置的窗口宽/高尺寸大于窗口最大宽/高限值，则窗口最大宽/高限值生效。 全屏模式窗口不支持该操作。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用resize()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    width number 是 目标窗口的宽度，单位为px。   height number 是 目标窗口的高度，单位为px。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let promise = windowClass.resetSize(500, 1000);promise.then(()=> {    console.info('Succeeded in changing the window size.');}).catch((err)=>{    console.error('Failed to change the window size. Cause: ' + JSON.stringify(err));});   getProperties(deprecated) getProperties(callback: AsyncCallback<WindowProperties>): void 获取当前窗口的属性，使用callback异步回调，返回WindowProperties。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用getWindowProperties()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<WindowProperties> 是 回调函数。返回当前窗口属性。    示例： 已复制windowClass.getProperties((err, data) => {    if (err.code) {        console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in obtaining the window properties. Data: ' + JSON.stringify(data));});   getProperties(deprecated) getProperties(): Promise<WindowProperties> 获取当前窗口的属性，使用Promise异步回调，返回WindowProperties。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用getWindowProperties()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<WindowProperties> Promise对象。返回当前窗口属性。    示例： 已复制let promise = windowClass.getProperties();promise.then((data)=> {    console.info('Succeeded in obtaining the window properties. Data: ' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(err));});   getAvoidArea(deprecated) getAvoidArea(type: AvoidAreaType, callback: AsyncCallback<AvoidArea>): void 获取窗口内容规避的区域；如系统栏区域、刘海屏区域、手势区域、软键盘区域等与窗口内容重叠时，需要窗口内容避让的区域。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用getWindowAvoidArea()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type AvoidAreaType 是 表示规避区类型。   callback AsyncCallback<AvoidArea> 是 回调函数。返回窗口内容规避区域。    示例： 已复制let type = window.AvoidAreaType.TYPE_SYSTEM;windowClass.getAvoidArea(type, (err, data) => {    if (err.code) {        console.error('Failed to obtain the area. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in obtaining the area. Data:' + JSON.stringify(data));});   getAvoidArea(deprecated) getAvoidArea(type: AvoidAreaType): Promise<AvoidArea> 获取窗口内容规避的区域；如系统栏区域、刘海屏区域、手势区域、软键盘区域等与窗口内容重叠时，需要窗口内容避让的区域。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用getWindowAvoidArea()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type AvoidAreaType 是 表示规避区类型。    返回值：    类型 说明  Promise<AvoidArea> Promise对象。返回窗口内容规避区域。    示例： 已复制let type = window.AvoidAreaType.TYPE_SYSTEM;let promise = windowClass.getAvoidArea(type);promise.then((data)=> {    console.info('Succeeded in obtaining the area. Data:' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to obtain the area. Cause:' + JSON.stringify(err));});   setFullScreen(deprecated) setFullScreen(isFullScreen: boolean, callback: AsyncCallback<void>): void 设置是否为全屏状态，使用callback异步回调。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐联合使用setWindowSystemBarEnable()和setWindowLayoutFullScreen()实现全屏。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isFullScreen boolean 是 是否设为全屏状态（该全屏状态隐藏状态栏导航栏)。true表示全屏；false表示非全屏。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let isFullScreen = true;windowClass.setFullScreen(isFullScreen, (err) => {    if (err.code) {        console.error('Failed to enable the full-screen mode. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in enabling the full-screen mode.');});   setFullScreen(deprecated) setFullScreen(isFullScreen: boolean): Promise<void> 设置是否为全屏状态，使用Promise异步回调。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐联合使用setWindowSystemBarEnable()和setWindowLayoutFullScreen()实现全屏。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isFullScreen boolean 是 是否设为全屏状态（该全屏状态隐藏状态栏导航栏）。true表示全屏；false表示非全屏。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let isFullScreen = true;let promise = windowClass.setFullScreen(isFullScreen);promise.then(()=> {    console.info('Succeeded in enabling the full-screen mode.');}).catch((err)=>{    console.error('Failed to enable the full-screen mode. Cause: ' + JSON.stringify(err));});   setLayoutFullScreen(deprecated) setLayoutFullScreen(isLayoutFullScreen: boolean, callback: AsyncCallback<void>): void 设置窗口的布局是否为全屏显示状态，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowLayoutFullScreen()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isLayoutFullScreen boolean 是 窗口的布局是否为全屏显示状态（该全屏状态下状态栏、导航栏仍然显示）。true表示全屏；false表示非全屏。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let isLayoutFullScreen= true;windowClass.setLayoutFullScreen(isLayoutFullScreen, (err) => {    if (err.code) {        console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the window layout to full-screen mode.');});   setLayoutFullScreen(deprecated) setLayoutFullScreen(isLayoutFullScreen: boolean): Promise<void> 设置窗口的布局是否为全屏显示状态，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowLayoutFullScreen()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isLayoutFullScreen boolean 是 窗口的布局是否为全屏显示状态（该全屏状态下状态栏、导航栏仍然显示）。true表示全屏；false表示非全屏。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let isLayoutFullScreen = true;let promise = windowClass.setLayoutFullScreen(isLayoutFullScreen);promise.then(()=> {    console.info('Succeeded in setting the window layout to full-screen mode.');}).catch((err)=>{    console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));});   setSystemBarEnable(deprecated) setSystemBarEnable(names: Array<'status' | 'navigation'>, callback: AsyncCallback<void>): void 设置导航栏、状态栏的可见模式，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowSystemBarEnable()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    names Array<'status'|'navigation'> 是 设置状态栏和导航栏是否显示。 例如，需全部显示，该参数设置为['status', 'navigation']；不设置，则默认不显示。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制// 此处以不显示导航栏、状态栏为例let names = [];windowClass.setSystemBarEnable(names, (err) => {    if (err.code) {        console.error('Failed to set the system bar to be invisible. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the system bar to be invisible.');});   setSystemBarEnable(deprecated) setSystemBarEnable(names: Array<'status' | 'navigation'>): Promise<void> 设置导航栏、状态栏的可见模式，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowSystemBarEnable()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    names Array<'status'|'navigation'> 是 设置状态栏和导航栏是否显示。 例如，需全部显示，该参数设置为['status', 'navigation']；不设置，则默认不显示。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制// 此处以不显示导航栏、状态栏为例let names = [];let promise = windowClass.setSystemBarEnable(names);promise.then(()=> {    console.info('Succeeded in setting the system bar to be invisible.');}).catch((err)=>{    console.error('Failed to set the system bar to be invisible. Cause:' + JSON.stringify(err));});   setSystemBarProperties(deprecated) setSystemBarProperties(systemBarProperties: SystemBarProperties, callback: AsyncCallback<void>): void 设置窗口内导航栏、状态栏的属性，使用callback异步回调。 
说明
  从 API version 6开始支持，从API version 9开始废弃。 此接口能力在HarmonyOS 3.1Release暂不支持。  
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    SystemBarProperties SystemBarProperties 是 导航栏、状态栏的属性。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let SystemBarProperties={    statusBarColor: '#ff00ff',    navigationBarColor: '#00ff00',    //以下两个属性从API Version8开始支持    statusBarContentColor:'#ffffff',    navigationBarContentColor:'#00ffff'};windowClass.setSystemBarProperties(SystemBarProperties, (err) => {    if (err.code) {        console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the system bar properties.');});   setSystemBarProperties(deprecated) setSystemBarProperties(systemBarProperties: SystemBarProperties): Promise<void> 设置窗口内导航栏、状态栏的属性，使用Promise异步回调。 
说明
  从 API version 6开始支持，从API version 9开始废弃。 此接口能力在HarmonyOS 3.1Release暂不支持。  
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    SystemBarProperties SystemBarProperties 是 导航栏、状态栏的属性。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let SystemBarProperties={    statusBarColor: '#ff00ff',    navigationBarColor: '#00ff00',    //以下两个属性从API Version8开始支持    statusBarContentColor:'#ffffff',    navigationBarContentColor:'#00ffff'};let promise = windowClass.setSystemBarProperties(SystemBarProperties);promise.then(()=> {    console.info('Succeeded in setting the system bar properties.');}).catch((err)=>{    console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));});   loadContent(deprecated) loadContent(path: string, callback: AsyncCallback<void>): void 为当前窗口加载具体页面内容，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setUIContent()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，Stage模型下该路径需添加到工程的main_pages.json文件中，FA模型下该路径需添加到工程的config.json文件中。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制windowClass.loadContent('pages/page2/page2', (err) => {   if (err.code) {         console.error('Failed to load the content. Cause:' + JSON.stringify(err));         return;   }  console.info('Succeeded in loading the content.');});   loadContent(deprecated) loadContent(path: string): Promise<void> 为当前窗口加载具体页面内容，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setUIContent()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，Stage模型下该路径需添加到工程的main_pages.json文件中，FA模型下该路径需添加到工程的config.json文件中。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let promise = windowClass.loadContent('pages/page2/page2');promise.then(()=> {    console.info('Succeeded in loading the content.');}).catch((err)=>{    console.error('Failed to load the content. Cause: ' + JSON.stringify(err));});   isShowing(deprecated) isShowing(callback: AsyncCallback<boolean>): void 判断当前窗口是否已显示，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用isWindowShowing()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<boolean> 是 回调函数。返回true表示当前窗口已显示，返回false表示当前窗口未显示。    示例： 已复制windowClass.isShowing((err, data) => {    if (err.code) {        console.error('Failed to check whether the window is showing. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in checking whether the window is showing. Data: ' + JSON.stringify(data));});   isShowing(deprecated) isShowing(): Promise<boolean> 判断当前窗口是否已显示，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用isWindowShowing()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<boolean> Promise对象。返回true表示当前窗口已显示，返回false表示当前窗口未显示。    示例： 已复制let promise = windowClass.isShowing();promise.then((data)=> {    console.info('Succeeded in checking whether the window is showing. Data: ' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to check whether the window is showing. Cause: ' + JSON.stringify(err));});   on('systemAvoidAreaChange')(deprecated) on(type: 'systemAvoidAreaChange', callback: Callback<AvoidArea>): void 开启系统规避区变化的监听。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用on('avoidAreaChange')。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'systemAvoidAreaChange'，即系统规避区变化事件。   callback Callback<AvoidArea> 是 回调函数。返回当前规避区。    示例： 已复制windowClass.on('systemAvoidAreaChange', (data) => {    console.info('Succeeded in enabling the listener for system avoid area changes. Data: ' + JSON.stringify(data));});   off('systemAvoidAreaChange')(deprecated) off(type: 'systemAvoidAreaChange', callback?: Callback<AvoidArea>): void 关闭系统规避区变化的监听。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用off('avoidAreaChange')。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'systemAvoidAreaChange'，即系统规避区变化事件。   callback Callback<AvoidArea> 否 回调函数。返回当前规避区。    示例： 已复制windowClass.off('systemAvoidAreaChange');   isSupportWideGamut(deprecated) isSupportWideGamut(callback: AsyncCallback<boolean>): void 判断当前窗口是否支持广色域模式，使用callback异步回调。 
说明
 从 API version 8开始支持，从API version 9开始废弃，推荐使用isWindowSupportWideGamut()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<boolean> 是 回调函数。返回true表示当前窗口支持广色域模式，返回false表示当前窗口不支持广色域模式。    示例： 已复制windowClass.isSupportWideGamut((err, data) => {    if (err.code) {        console.error('Failed to check whether the window support WideGamut. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in checking whether the window support WideGamut Data: ' + JSON.stringify(data));});   isSupportWideGamut(deprecated) isSupportWideGamut(): Promise<boolean> 判断当前窗口是否支持广色域模式，使用Promise异步回调。 
说明
 从 API version 8开始支持，从API version 9开始废弃，推荐使用isWindowSupportWideGamut()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<boolean> Promise对象。返回true表示当前窗口支持广色域模式，返回false表示当前窗口不支持广色域模式。    示例： 已复制let promise = windowClass.isSupportWideGamut();promise.then((data)=> {    console.info('Succeeded in checking whether the window support WideGamut. Data: ' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to check whether the window support WideGamut. Cause: ' + JSON.stringify(err));});   setColorSpace(deprecated) setColorSpace(colorSpace:ColorSpace, callback: AsyncCallback<void>): void 设置当前窗口为广色域模式或默认色域模式，使用callback异步回调。 
说明
 从 API version 8开始支持，从API version 9开始废弃，推荐使用setWindowColorSpace()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    colorSpace ColorSpace 是 设置色域模式。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制windowClass.setColorSpace(window.ColorSpace.WIDE_GAMUT, (err) => {    if (err.code) {        console.error('Failed to set window colorspace. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting window colorspace.');});   setColorSpace(deprecated) setColorSpace(colorSpace:ColorSpace): Promise<void> 设置当前窗口为广色域模式或默认色域模式，使用Promise异步回调。 
说明
 从 API version 8开始支持，从API version 9开始废弃，推荐使用setWindowColorSpace()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    colorSpace ColorSpace 是 设置色域模式。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let promise = windowClass.setColorSpace(window.ColorSpace.WIDE_GAMUT);promise.then(()=> {    console.info('Succeeded in setting window colorspace.');}).catch((err)=>{    console.error('Failed to set window colorspace. Cause: ' + JSON.stringify(err));});   getColorSpace(deprecated) getColorSpace(callback: AsyncCallback<ColorSpace>): void 获取当前窗口色域模式，使用callback异步回调。 
说明
 从 API version 8开始支持，从API version 9开始废弃，推荐使用getWindowColorSpace()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<ColorSpace> 是 回调函数。当获取成功，err为undefined，data为当前色域模式。    示例： 已复制windowClass.getColorSpace((err, data) => {    if (err.code) {        console.error('Failed to get window colorspace. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in getting window colorspace. Cause:' + JSON.stringify(data));});   getColorSpace(deprecated) getColorSpace(): Promise<ColorSpace> 获取当前窗口色域模式，使用Promise异步回调。 
说明
 从 API version 8开始支持，从API version 9开始废弃，推荐使用getWindowColorSpace()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<ColorSpace> Promise对象。返回当前色域模式。    示例： 已复制let promise = windowClass.getColorSpace();promise.then((data)=> {    console.info('Succeeded in getting window color space. Cause:' + JSON.stringify(data));}).catch((err)=>{    console.error('Failed to get window colorspace. Cause: ' + JSON.stringify(err));});   setBackgroundColor(deprecated) setBackgroundColor(color: string, callback: AsyncCallback<void>): void 设置窗口的背景色，使用callback异步回调。Stage模型下，该接口需要在loadContent或setUIContent之后使用。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用setWindowBackgroundColor()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    color string 是 需要设置的背景色，为十六进制RGB或ARGB颜色，不区分大小写，例如#00FF00或#FF00FF00。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let color = '#00ff33';windowClass.setBackgroundColor(color, (err) => {    if (err.code) {        console.error('Failed to set the background color. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the background color.');});   setBackgroundColor(deprecated) setBackgroundColor(color: string): Promise<void> 设置窗口的背景色，使用Promise异步回调。Stage模型下，该接口需要在loadContent或setUIContent之后使用。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用setWindowBackgroundColor()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    color string 是 需要设置的背景色，为十六进制RGB或ARGB颜色，不区分大小写，例如#00FF00或#FF00FF00。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let color = '#00ff33';let promise = windowClass.setBackgroundColor(color);promise.then(()=> {    console.info('Succeeded in setting the background color.');}).catch((err)=>{    console.error('Failed to set the background color. Cause: ' + JSON.stringify(err));});   setBrightness(deprecated) setBrightness(brightness: number, callback: AsyncCallback<void>): void 设置屏幕亮度值，使用callback异步回调。 当前屏幕亮度规格：窗口设置屏幕亮度生效时，控制中心不可以调整系统屏幕亮度，窗口恢复默认系统亮度之后，控制中心可以调整系统屏幕亮度。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用setWindowBrightness()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    brightness number 是 屏幕亮度值，值为0-1之间。1表示最亮。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let brightness = 1;windowClass.setBrightness(brightness, (err) => {    if (err.code) {        console.error('Failed to set the brightness. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the brightness.');});   setBrightness(deprecated) setBrightness(brightness: number): Promise<void> 设置屏幕亮度值，使用Promise异步回调。 当前屏幕亮度规格：窗口设置屏幕亮度生效时，控制中心不可以调整系统屏幕亮度，窗口恢复默认系统亮度之后，控制中心可以调整系统屏幕亮度。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用setWindowBrightness()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    brightness number 是 屏幕亮度值，值为0-1之间。1表示最亮。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let brightness = 1;let promise = windowClass.setBrightness(brightness);promise.then(()=> {    console.info('Succeeded in setting the brightness.');}).catch((err)=>{    console.error('Failed to set the brightness. Cause: ' + JSON.stringify(err));});   setDimBehind(deprecated) setDimBehind(dimBehindValue: number, callback: AsyncCallback<void>): void 窗口叠加时，设备有子窗口的情况下设置靠后的窗口的暗度值，使用callback异步回调。 
说明
 该接口不支持使用。从 API version 7开始支持，从API version 9开始废弃。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    dimBehindValue number 是 表示靠后的窗口的暗度值，取值范围为0-1，1表示最暗。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制windowClass.setDimBehind(0.5, (err) => {    if (err.code) {        console.error('Failed to set the dimness. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the dimness.');});   setDimBehind(deprecated) setDimBehind(dimBehindValue: number): Promise<void> 窗口叠加时，设备有子窗口的情况下设置靠后的窗口的暗度值，使用Promise异步回调。 
说明
 该接口不支持使用。从 API version 7开始支持，从API version 9开始废弃。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    dimBehindValue number 是 表示靠后的窗口的暗度值，取值范围为0-1，1表示最暗。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let promise = windowClass.setDimBehind(0.5);promise.then(()=> {    console.info('Succeeded in setting the dimness.');}).catch((err)=>{    console.error('Failed to set the dimness. Cause: ' + JSON.stringify(err));});   setFocusable(deprecated) setFocusable(isFocusable: boolean, callback: AsyncCallback<void>): void 设置点击时是否支持切换焦点窗口，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowFocusable()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isFocusable boolean 是 点击时是否支持切换焦点窗口。true表示支持；false表示不支持。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let isFocusable= true;windowClass.setFocusable(isFocusable, (err) => {    if (err.code) {        console.error('Failed to set the window to be focusable. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the window to be focusable.');});   setFocusable(deprecated) setFocusable(isFocusable: boolean): Promise<void> 设置点击时是否支持切换焦点窗口，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowFocusable()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isFocusable boolean 是 点击时是否支持切换焦点窗口。true表示支持；false表示不支持。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let isFocusable= true;let promise = windowClass.setFocusable(isFocusable);promise.then(()=> {    console.info('Succeeded in setting the window to be focusable.');}).catch((err)=>{    console.error('Failed to set the window to be focusable. Cause: ' + JSON.stringify(err));});   setKeepScreenOn(deprecated) setKeepScreenOn(isKeepScreenOn: boolean, callback: AsyncCallback<void>): void 设置屏幕是否为常亮状态，使用callback异步回调。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用setWindowKeepScreenOn()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isKeepScreenOn boolean 是 设置屏幕是否为常亮状态。true表示常亮；false表示不常亮。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let isKeepScreenOn = true;windowClass.setKeepScreenOn(isKeepScreenOn, (err) => {    if (err.code) {        console.error('Failed to set the screen to be always on. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the screen to be always on.');});   setKeepScreenOn(deprecated) setKeepScreenOn(isKeepScreenOn: boolean): Promise<void> 设置屏幕是否为常亮状态，使用Promise异步回调。 
说明
 从 API version 6开始支持，从API version 9开始废弃，推荐使用setWindowKeepScreenOn()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isKeepScreenOn boolean 是 设置屏幕是否为常亮状态。true表示常亮；false表示不常亮。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let isKeepScreenOn = true;let promise = windowClass.setKeepScreenOn(isKeepScreenOn);promise.then(() => {    console.info('Succeeded in setting the screen to be always on.');}).catch((err)=>{    console.info('Failed to set the screen to be always on. Cause:  ' + JSON.stringify(err));});   setOutsideTouchable(deprecated) setOutsideTouchable(touchable: boolean, callback: AsyncCallback<void>): void 设置是否允许可点击子窗口之外的区域，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃。 从 API version 9开始，系统默认允许点击子窗口之外的区域，此接口不再支持使用，也不再提供替代接口。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    touchable boolean 是 设置是否可点击。true表示可点击；false表示不可点击。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制windowClass.setOutsideTouchable(true, (err) => {    if (err.code) {        console.error('Failed to set the area to be touchable. Cause: ' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the area to be touchable.');});   setOutsideTouchable(deprecated) setOutsideTouchable(touchable: boolean): Promise<void> 设置是否允许可点击子窗口之外的区域，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃。 从 API version 9开始，系统默认允许点击子窗口之外的区域，此接口不再支持使用，也不再提供替代接口。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    touchable boolean 是 设置是否可点击。true表示可点击；false表示不可点击。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let promise = windowClass.setOutsideTouchable(true);promise.then(()=> {    console.info('Succeeded in setting the area to be touchable.');}).catch((err)=>{    console.error('Failed to set the area to be touchable. Cause: ' + JSON.stringify(err));});   setPrivacyMode(deprecated) setPrivacyMode(isPrivacyMode: boolean, callback: AsyncCallback<void>): void 设置窗口是否为隐私模式，使用callback异步回调。设置为隐私模式的窗口，窗口内容将无法被截屏或录屏。此接口可用于禁止截屏/录屏的场景。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowPrivacyMode()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isPrivacyMode boolean 是 窗口是否为隐私模式。true表示模式开启；false表示模式关闭。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let isPrivacyMode = true;windowClass.setPrivacyMode(isPrivacyMode, (err) => {    if (err.code) {        console.error('Failed to set the window to privacy mode. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the window to privacy mode.');});   setPrivacyMode(deprecated) setPrivacyMode(isPrivacyMode: boolean): Promise<void> 设置窗口是否为隐私模式，使用Promise异步回调。设置为隐私模式的窗口，窗口内容将无法被截屏或录屏。此接口可用于禁止截屏/录屏的场景。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowPrivacyMode()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isPrivacyMode boolean 是 窗口是否为隐私模式。true表示模式开启；false表示模式关闭。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let isPrivacyMode = true;let promise = windowClass.setPrivacyMode(isPrivacyMode);promise.then(()=> {    console.info('Succeeded in setting the window to privacy mode.');}).catch((err)=>{    console.error('Failed to set the window to privacy mode. Cause: ' + JSON.stringify(err));});   setTouchable(deprecated) setTouchable(isTouchable: boolean, callback: AsyncCallback<void>): void 设置窗口是否为可触状态，使用callback异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowTouchable()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isTouchable boolean 是 窗口是否为可触状态。true表示可触；false表示不可触。   callback AsyncCallback<void> 是 回调函数。    示例： 已复制let isTouchable = true;windowClass.setTouchable(isTouchable, (err) => {    if (err.code) {        console.error('Failed to set the window to be touchable. Cause:' + JSON.stringify(err));        return;    }    console.info('Succeeded in setting the window to be touchable.');});   setTouchable(deprecated) setTouchable(isTouchable: boolean): Promise<void> 设置窗口是否为可触状态，使用Promise异步回调。 
说明
 从 API version 7开始支持，从API version 9开始废弃，推荐使用setWindowTouchable()。 
 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    isTouchable boolean 是 窗口是否为可触状态。true表示可触；false表示不可触。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    示例： 已复制let isTouchable = true;let promise = windowClass.setTouchable(isTouchable);promise.then(()=> {    console.info('Succeeded in setting the window to be touchable.');}).catch((err)=>{    console.error('Failed to set the window to be touchable. Cause: ' + JSON.stringify(err));});   WindowStageEventType9+ WindowStage生命周期。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core     名称 值 说明    SHOWN 1 切到前台。   ACTIVE 2 获焦状态。   INACTIVE 3 失焦状态。   HIDDEN 4 切到后台。      WindowStage9+ 窗口管理器。管理各个基本窗口单元，即Window实例。 下列API示例中都需在onWindowStageCreate()函数中使用WindowStage的实例调用对应方法。   getMainWindow9+ getMainWindow(callback: AsyncCallback<Window>): void 获取该WindowStage实例下的主窗口，使用callback异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<Window> 是 回调函数。返回当前WindowStage下的主窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        let windowClass = null;        windowStage.getMainWindow((err, data) => {            if (err.code) {                console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));                return;            }            windowClass = data;            console.info('Succeeded in obtaining the main window. Data: ' + JSON.stringify(data));        });    }};   getMainWindow9+ getMainWindow(): Promise<Window> 获取该WindowStage实例下的主窗口，使用Promise异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<Window> Promise对象。返回当前WindowStage下的主窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        let windowClass = null;        let promise = windowStage.getMainWindow();        promise.then((data) => {        windowClass = data;            console.info('Succeeded in obtaining the main window. Data: ' + JSON.stringify(data));        }).catch((err) => {            console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));        });    }};   getMainWindowSync9+ getMainWindowSync(): Window 获取该WindowStage实例下的主窗口。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Window 返回当前WindowStage下的主窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        try {            let windowClass = windowStage.getMainWindowSync();        } catch (exception) {            console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(exception));        };    }};   createSubWindow9+ createSubWindow(name: string, callback: AsyncCallback<Window>): void 创建该WindowStage实例下的子窗口，使用callback异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    name string 是 子窗口的名字。   callback AsyncCallback<Window> 是 回调函数。返回当前WindowStage下的子窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        let windowClass = null;        try {            windowStage.createSubWindow('mySubWindow', (err, data) => {                if (err.code) {                    console.error('Failed to create the subwindow. Cause: ' + JSON.stringify(err));                    return;                }                windowClass = data;                console.info('Succeeded in creating the subwindow. Data: ' + JSON.stringify(data));                windowClass.resize(500, 1000);            });        } catch (exception) {            console.error('Failed to create the subwindow. Cause: ' + JSON.stringify(exception));        };    }};   createSubWindow9+ createSubWindow(name: string): Promise<Window> 创建该WindowStage实例下的子窗口，使用Promise异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    name string 是 子窗口的名字。    返回值：    类型 说明  Promise<Window> Promise对象。返回当前WindowStage下的子窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        let windowClass = null;        try {            let promise = windowStage.createSubWindow('mySubWindow');            promise.then((data) => {                windowClass = data;                console.info('Succeeded in creating the subwindow. Data: ' + JSON.stringify(data));            }).catch((err) => {                console.error('Failed to create the subwindow. Cause: ' + JSON.stringify(err));            });        } catch (exception) {            console.error('Failed to create the subwindow. Cause: ' + JSON.stringify(exception));        };    }};   getSubWindow9+ getSubWindow(callback: AsyncCallback<Array<Window>>): void 获取该WindowStage实例下的所有子窗口，使用callback异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    callback AsyncCallback<Array<Window>> 是 回调函数。返回当前WindowStage下的所有子窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        let windowClass = null;        windowStage.getSubWindow((err, data) => {            if (err.code) {                console.error('Failed to obtain the subwindow. Cause: ' + JSON.stringify(err));                return;            }            windowClass = data;            console.info('Succeeded in obtaining the subwindow. Data: ' + JSON.stringify(data));        });    }};   getSubWindow9+ getSubWindow(): Promise<Array<Window>> 获取该WindowStage实例下的所有子窗口，使用Promise异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 返回值：    类型 说明  Promise<Array<Window>> Promise对象。返回当前WindowStage下的所有子窗口对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        let windowClass = null;        let promise = windowStage.getSubWindow();        promise.then((data) => {            windowClass = data;            console.info('Succeeded in obtaining the subwindow. Data: ' + JSON.stringify(data));        }).catch((err) => {            console.error('Failed to obtain the subwindow. Cause: ' + JSON.stringify(err));        })    }};   loadContent9+ loadContent(path: string, storage: LocalStorage, callback: AsyncCallback<void>): void 为当前WindowStage的主窗口加载与LocalStorage相关联的具体页面内容，使用callback异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，该路径需添加到工程的main_pages.json文件中。   storage LocalStorage 是 存储单元，为应用程序范围内的可变状态属性和非可变状态属性提供存储。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    storage : LocalStorage    onWindowStageCreate(windowStage) {        this.storage = new LocalStorage();        this.storage.setOrCreate('storageSimpleProp',121);        console.log('onWindowStageCreate');        try {            windowStage.loadContent('pages/page2',this.storage,(err) => {                if (err.code) {                    console.error('Failed to load the content. Cause:' + JSON.stringify(err));                    return;                }                console.info('Succeeded in loading the content.');            });        } catch (exception) {            console.error('Failed to load the content. Cause:' + JSON.stringify(exception));        };    }};   loadContent9+ loadContent(path: string, storage?: LocalStorage): Promise<void> 为当前WindowStage的主窗口加载与LocalStorage相关联的具体页面内容，使用Promise异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，该路径需添加到工程的main_pages.json文件中。   storage LocalStorage 否 存储单元，为应用程序范围内的可变状态属性和非可变状态属性提供存储。    返回值：    类型 说明  Promise<void> 无返回结果的Promise对象。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    storage : LocalStorage    onWindowStageCreate(windowStage) {        this.storage = new LocalStorage();        this.storage.setOrCreate('storageSimpleProp',121);        console.log('onWindowStageCreate');        try {            let promise = windowStage.loadContent('pages/page2',this.storage);            promise.then(() => {                console.info('Succeeded in loading the content.');            }).catch((err) => {                console.error('Failed to load the content. Cause:' + JSON.stringify(err));            });        } catch (exception) {            console.error('Failed to load the content. Cause:' + JSON.stringify(exception));        };    }};   loadContent9+ loadContent(path: string, callback: AsyncCallback<void>): void 为当前WindowStage的主窗口加载具体页面内容，使用callback异步回调。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    path string 是 要加载到窗口中的页面内容的路径，该路径需添加到工程的main_pages.json文件中。   callback AsyncCallback<void> 是 回调函数。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        try {            windowStage.loadContent('pages/page2', (err) => {                if (err.code) {                    console.error('Failed to load the content. Cause:' + JSON.stringify(err));                    return;                }                console.info('Succeeded in loading the content.');            });        } catch (exception) {            console.error('Failed to load the content. Cause:' + JSON.stringify(exception));        };    }};   on('windowStageEvent')9+ on(eventType: 'windowStageEvent', callback: Callback<WindowStageEventType>): void 开启WindowStage生命周期变化的监听。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'windowStageEvent'，即WindowStage生命周期变化事件。   callback Callback<WindowStageEventType> 是 回调函数。返回当前的WindowStage生命周期状态。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        try {            windowStage.on('windowStageEvent', (data) => {                console.info('Succeeded in enabling the listener for window stage event changes. Data: ' +                    JSON.stringify(data));            });        } catch (exception) {            console.error('Failed to enable the listener for window stage event changes. Cause:' +                JSON.stringify(exception));        };    }};   off('windowStageEvent')9+ off(eventType: 'windowStageEvent', callback?: Callback<WindowStageEventType>): void 关闭WindowStage生命周期变化的监听。 模型约束： 此接口仅可在Stage模型下使用。 系统能力： SystemCapability.WindowManager.WindowManager.Core 参数：     参数名 类型 必填 说明    type string 是 监听事件，固定为'windowStageEvent'，即WindowStage生命周期变化事件。   callback Callback<WindowStageEventType> 否 回调函数。返回当前的WindowStage生命周期状态。    错误码： 以下错误码的详细介绍请参见窗口错误码。    错误码ID 错误信息  1300002 This window state is abnormal.   1300005 This window stage is abnormal.    示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class myAbility extends UIAbility {    onWindowStageCreate(windowStage) {        console.log('onWindowStageCreate');        try {            windowStage.off('windowStageEvent');        } catch (exception) {            console.error('Failed to disable the listener for window stage event changes. Cause:' +                JSON.stringify(exception));        };    }};   上一篇 @ohos.graphics.colorSpaceManager (色彩管理) 下一篇 webgl 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。