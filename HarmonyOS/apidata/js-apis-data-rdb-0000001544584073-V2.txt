您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块data_rdb.getRdbStoredata_rdb.getRdbStoredata_rdb.deleteRdbStoredata_rdb.deleteRdbStoreValueTypeValuesBucketSyncMode8+SubscribeType8+StoreConfigRdbPredicatesconstructorinDevices8+inAllDevices8+equalTonotEqualTobeginWrapendWraporandcontainsbeginsWithendsWithisNullisNotNulllikeglobbetweennotBetweengreaterThanlessThangreaterThanOrEqualTolessThanOrEqualToorderByAscorderByDescdistinctlimitAsoffsetAsgroupByindexedByinnotInRdbStoreinsertinsertbatchInsertbatchInsertupdateupdatedeletedeletequeryqueryquerySql8+querySql8+executeSql8+executeSql8+beginTransaction8+commit8+rollBack8+setDistributedTables8+setDistributedTables8+obtainDistributedTableName8+obtainDistributedTableName8+sync8+sync8+on('dataChange')8+off('dataChange')8+@ohos.data.rdb (关系型数据库) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
 关系型数据库（Relational Database，RDB）是一种基于关系模型来管理数据的数据库。关系型数据库基于SQLite组件提供了一套完整的对本地数据库进行管理的机制，对外提供了一系列的增、删、改、查等接口，也可以直接运行用户输入的SQL语句来满足复杂的场景需要。不支持Worker线程。 该模块提供以下关系型数据库相关的常用功能： RdbPredicates： 数据库中用来代表数据实体的性质、特征或者数据实体之间关系的词项，主要用来定义数据库的操作条件。RdbStore：提供管理关系数据库(RDB)方法的接口。 
说明
本模块首批接口从API version 7开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。从API Version 9开始，该接口不再维护，推荐使用新接口@ohos.data.relationalStore。关系型数据库当前仅支持本地功能，分布式功能暂不支持。 
 导入模块已复制import data_rdb from '@ohos.data.rdb';  data_rdb.getRdbStoregetRdbStore(context: Context, config: StoreConfig, version: number, callback: AsyncCallback<RdbStore>): void 获得一个相关的RdbStore，操作关系型数据库，用户可以根据自己的需求配置RdbStore的参数，然后通过RdbStore调用相关接口可以执行相关的数据操作，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用的上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   config  StoreConfig  是  与此RDB存储相关的数据库配置。   version  number  是  数据库版本。 目前暂不支持通过version自动识别数据库升级降级操作，只能由开发者自行维护。   callback  AsyncCallback<RdbStore>  是  指定callback回调函数，返回RdbStore对象。     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility'let context = featureAbility.getContext()
// 获取context后调用getRdbStoreconst STORE_CONFIG = { name: "RdbTest.db"}data_rdb.getRdbStore(context, STORE_CONFIG, 1, function (err, rdbStore) {    if (err) {        console.info("Get RdbStore failed, err: " + err)        return    }    console.log("Get RdbStore successfully.")}) Stage模型示例： 已复制// 获取contextimport UIAbility from '@ohos.app.ability.UIAbility';
let context;class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage){        context = this.context    }}
// 获取context后调用getRdbStoreconst STORE_CONFIG = { name: "RdbTest.db"}data_rdb.getRdbStore(context, STORE_CONFIG, 1, function (err, rdbStore) {    if (err) {        console.info("Get RdbStore failed, err: " + err)        return    }    console.log("Get RdbStore successfully.")})  data_rdb.getRdbStoregetRdbStore(context: Context, config: StoreConfig, version: number): Promise<RdbStore> 获得一个相关的RdbStore，操作关系型数据库，用户可以根据自己的需求配置RdbStore的参数，然后通过RdbStore调用相关接口可以执行相关的数据操作，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用的上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   config  StoreConfig  是  与此RDB存储相关的数据库配置。   version  number  是  数据库版本。 目前暂不支持通过version自动识别数据库升级降级操作，只能由开发者自行维护。     返回值：  类型  说明  Promise<RdbStore>  Promise对象。返回RdbStore对象。     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility'let context = featureAbility.getContext()
// 获取context后调用getRdbStoreconst STORE_CONFIG = { name: "RdbTest.db" }let promise = data_rdb.getRdbStore(context, STORE_CONFIG, 1);promise.then(async (rdbStore) => {    console.log("Get RdbStore successfully.")}).catch((err) => {    console.log("Get RdbStore failed, err: " + err)}) Stage模型示例： 已复制// 获取contextimport UIAbility from '@ohos.app.ability.UIAbility';
let context;class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage){        context = this.context    }}
// 获取context后调用getRdbStoreconst STORE_CONFIG = { name: "RdbTest.db" }let promise = data_rdb.getRdbStore(context, STORE_CONFIG, 1);promise.then(async (rdbStore) => {    console.log("Get RdbStore successfully.")}).catch((err) => {    console.log("Get RdbStore failed, err: " + err)})  data_rdb.deleteRdbStoredeleteRdbStore(context: Context, name: string, callback: AsyncCallback<void>): void 删除数据库，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用的上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   name  string  是  数据库名称。   callback  AsyncCallback<void>  是  指定callback回调函数。     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility'let context = featureAbility.getContext()
// 获取context后调用deleteRdbStoredata_rdb.deleteRdbStore(context, "RdbTest.db", function (err) {    if (err) {        console.info("Delete RdbStore failed, err: " + err)        return    }    console.log("Delete RdbStore successfully.")}) Stage模型示例： 已复制// 获取contextimport UIAbility from '@ohos.app.ability.UIAbility';
let context;class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage){        context = this.context    }}
// 获取context后调用deleteRdbStoredata_rdb.deleteRdbStore(context, "RdbTest.db", function (err) {    if (err) {        console.info("Delete RdbStore failed, err: " + err)        return    }    console.log("Delete RdbStore successfully.")})  data_rdb.deleteRdbStoredeleteRdbStore(context: Context, name: string): Promise<void> 使用指定的数据库文件配置删除数据库，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数 参数名  类型  必填  说明    context  Context  是  应用的上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   name  string  是  数据库名称。     返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility'let context = featureAbility.getContext()
// 获取context后调用deleteRdbStorelet promise = data_rdb.deleteRdbStore(context, "RdbTest.db")promise.then(() => {    console.log("Delete RdbStore successfully.")}).catch((err) => {    console.info("Delete RdbStore failed, err: " + err)}) Stage模型示例： 已复制// 获取contextimport UIAbility from '@ohos.app.ability.UIAbility';
let context;class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage){        context = this.context    }}
// 获取context后调用deleteRdbStorelet promise = data_rdb.deleteRdbStore(context, "RdbTest.db")promise.then(()=>{    console.log("Delete RdbStore successfully.")}).catch((err) => {    console.info("Delete RdbStore failed, err: " + err)})  ValueType用于表示允许的数据字段类型。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core  类型  说明  number  表示值类型为数字。   string  表示值类型为字符。   boolean  表示值类型为布尔值。      ValuesBucket用于存储键值对的类型。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core  键类型  值类型  string  ValueType| Uint8Array | null      SyncMode8+指数据库同步模式。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 名称  值  说明    SYNC_MODE_PUSH  0  表示数据从本地设备推送到远程设备。   SYNC_MODE_PULL  1  表示数据从远程设备拉至本地设备。      SubscribeType8+描述订阅类型。 需要权限： ohos.permission.DISTRIBUTED_DATASYNC 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 名称  值  说明    SUBSCRIBE_TYPE_REMOTE  0  订阅远程数据更改。      StoreConfig管理关系数据库配置。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 名称  类型  必填  说明    name  string  是  数据库文件名。      RdbPredicates表示关系型数据库（RDB）的谓词。该类确定RDB中条件表达式的值是true还是false。  constructorconstructor(name: string) 构造函数。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    name  string  是  数据库表名。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")  inDevices8+inDevices(devices: Array<string>): RdbPredicates 同步分布式数据库时连接到组网内指定的远程设备。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    devices  Array<string>  是  指定的组网内的远程设备ID。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.inDevices(['12345678abcde'])  inAllDevices8+inAllDevices(): RdbPredicates 同步分布式数据库时连接到组网内所有的远程设备。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.inAllDevices()  equalToequalTo(field: string, value: ValueType): RdbPredicates 配置谓词以匹配数据字段为ValueType且值等于指定值的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  ValueType  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "lisi")  notEqualTonotEqualTo(field: string, value: ValueType): RdbPredicates 配置谓词以匹配数据字段为ValueType且值不等于指定值的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  ValueType  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.notEqualTo("NAME", "lisi")  beginWrapbeginWrap(): RdbPredicates 向谓词添加左括号。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 返回值：  类型  说明  RdbPredicates  返回带有左括号的Rdb谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "lisi")    .beginWrap()    .equalTo("AGE", 18)    .or()    .equalTo("SALARY", 200.5)    .endWrap()  endWrapendWrap(): RdbPredicates 向谓词添加右括号。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 返回值：  类型  说明  RdbPredicates  返回带有右括号的Rdb谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "lisi")    .beginWrap()    .equalTo("AGE", 18)    .or()    .equalTo("SALARY", 200.5)    .endWrap()  oror(): RdbPredicates 将或条件添加到谓词中。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 返回值：  类型  说明  RdbPredicates  返回带有或条件的Rdb谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Lisa")    .or()    .equalTo("NAME", "Rose")  andand(): RdbPredicates 向谓词添加和条件。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 返回值：  类型  说明  RdbPredicates  返回带有和条件的Rdb谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Lisa")    .and()    .equalTo("SALARY", 200.5)  containscontains(field: string, value: string): RdbPredicates 配置谓词以匹配数据字段为string且value包含指定值的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  string  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.contains("NAME", "os")  beginsWithbeginsWith(field: string, value: string): RdbPredicates 配置谓词以匹配数据字段为string且值以指定字符串开头的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  string  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.beginsWith("NAME", "os")  endsWithendsWith(field: string, value: string): RdbPredicates 配置谓词以匹配数据字段为string且值以指定字符串结尾的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  string  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.endsWith("NAME", "se")  isNullisNull(field: string): RdbPredicates 配置谓词以匹配值为null的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.isNull("NAME")  isNotNullisNotNull(field: string): RdbPredicates 配置谓词以匹配值不为null的指定字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.isNotNull("NAME")  likelike(field: string, value: string): RdbPredicates 配置谓词以匹配数据字段为string且值类似于指定字符串的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  string  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.like("NAME", "%os%")  globglob(field: string, value: string): RdbPredicates 配置RdbPredicates匹配数据字段为string的指定字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  string  是  指示要与谓词匹配的值。 支持通配符，*表示0个、1个或多个数字或字符，?表示1个数字或字符。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.glob("NAME", "?h*g")  betweenbetween(field: string, low: ValueType, high: ValueType): RdbPredicates 将谓词配置为匹配数据字段为ValueType且value在给定范围内的指定字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   low  ValueType  是  指示与谓词匹配的最小值。   high  ValueType  是  指示要与谓词匹配的最大值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.between("AGE", 10, 50)  notBetweennotBetween(field: string, low: ValueType, high: ValueType): RdbPredicates 配置RdbPredicates以匹配数据字段为ValueType且value超出给定范围的指定字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   low  ValueType  是  指示与谓词匹配的最小值。   high  ValueType  是  指示要与谓词匹配的最大值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.notBetween("AGE", 10, 50)  greaterThangreaterThan(field: string, value: ValueType): RdbPredicates 配置谓词以匹配数据字段为ValueType且值大于指定值的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  ValueType  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.greaterThan("AGE", 18)  lessThanlessThan(field: string, value: ValueType): RdbPredicates 配置谓词以匹配数据字段为valueType且value小于指定值的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  ValueType  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.lessThan("AGE", 20)  greaterThanOrEqualTogreaterThanOrEqualTo(field: string, value: ValueType): RdbPredicates 配置谓词以匹配数据字段为ValueType且value大于或等于指定值的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  ValueType  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.greaterThanOrEqualTo("AGE", 18)  lessThanOrEqualTolessThanOrEqualTo(field: string, value: ValueType): RdbPredicates 配置谓词以匹配数据字段为ValueType且value小于或等于指定值的字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  ValueType  是  指示要与谓词匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.lessThanOrEqualTo("AGE", 20)  orderByAscorderByAsc(field: string): RdbPredicates 配置谓词以匹配其值按升序排序的列。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.orderByAsc("NAME")  orderByDescorderByDesc(field: string): RdbPredicates 配置谓词以匹配其值按降序排序的列。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.orderByDesc("AGE")  distinctdistinct(): RdbPredicates 配置谓词以过滤重复记录并仅保留其中一个。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 返回值：  类型  说明  RdbPredicates  返回可用于过滤重复记录的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Rose").distinct()  limitAslimitAs(value: number): RdbPredicates 设置最大数据记录数的谓词。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    value  number  是  最大数据记录数。     返回值：  类型  说明  RdbPredicates  返回可用于设置最大数据记录数的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Rose").limitAs(3)  offsetAsoffsetAs(rowOffset: number): RdbPredicates 配置RdbPredicates以指定返回结果的起始位置。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    rowOffset  number  是  返回结果的起始位置，取值为正整数。     返回值：  类型  说明  RdbPredicates  返回具有指定返回结果起始位置的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Rose").offsetAs(3)  groupBygroupBy(fields: Array<string>): RdbPredicates 配置RdbPredicates按指定列分组查询结果。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    fields  Array<string>  是  指定分组依赖的列名。     返回值：  类型  说明  RdbPredicates  返回分组查询列的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.groupBy(["AGE", "NAME"])  indexedByindexedBy(field: string): RdbPredicates 配置RdbPredicates以指定索引列。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  索引列的名称。     返回值：  类型  说明  RdbPredicates  返回具有指定索引列的RdbPredicates。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.indexedBy("SALARY_INDEX")  inin(field: string, value: Array<ValueType>): RdbPredicates 配置RdbPredicates以匹配数据字段为ValueType数组且值在给定范围内的指定字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  Array<ValueType>  是  以ValueType型数组形式指定的要匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.in("AGE", [18, 20])  notInnotIn(field: string, value: Array<ValueType>): RdbPredicates 将RdbPredicates配置为匹配数据字段为ValueType且值超出给定范围的指定字段。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    field  string  是  数据库表中的列名。   value  Array<ValueType>  是  以ValueType数组形式指定的要匹配的值。     返回值：  类型  说明  RdbPredicates  返回与指定字段匹配的谓词。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.notIn("NAME", ["Lisa", "Rose"])  RdbStore提供管理关系数据库(RDB)方法的接口。 在使用以下相关接口前，请使用executeSql接口初始化数据库表结构和相关数据。  insertinsert(table: string, values: ValuesBucket, callback: AsyncCallback<number>):void 向目标表中插入一行数据，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    table  string  是  指定的目标表名。   values  ValuesBucket  是  表示要插入到表中的数据行。   callback  AsyncCallback<number>  是  指定callback回调函数。如果操作成功，返回行ID；否则返回-1。     示例： 已复制const valueBucket = {    "NAME": "Lisa",    "AGE": 18,    "SALARY": 100.5,    "CODES": new Uint8Array([1, 2, 3, 4, 5]),}rdbStore.insert("EMPLOYEE", valueBucket, function (status, rowId) {    if (status) {        console.log("Insert is failed");        return;    }    console.log("Insert is successful, rowId = " + rowId);})  insertinsert(table: string, values: ValuesBucket):Promise<number> 向目标表中插入一行数据，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    table  string  是  指定的目标表名。   values  ValuesBucket  是  表示要插入到表中的数据行。     返回值：  类型  说明  Promise<number>  Promise对象。如果操作成功，返回行ID；否则返回-1。     示例： 已复制const valueBucket = {    "NAME": "Lisa",    "AGE": 18,    "SALARY": 100.5,    "CODES": new Uint8Array([1, 2, 3, 4, 5]),}let promise = rdbStore.insert("EMPLOYEE", valueBucket)promise.then((rowId) => {    console.log("Insert is successful, rowId = " + rowId);}).catch((status) => {    console.log("Insert is failed");})  batchInsertbatchInsert(table: string, values: Array<ValuesBucket>, callback: AsyncCallback<number>):void 向目标表中插入一组数据，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    table  string  是  指定的目标表名。   values  Array<ValuesBucket>  是  表示要插入到表中的一组数据。   callback  AsyncCallback<number>  是  指定callback回调函数。如果操作成功，返回插入的数据个数，否则返回-1。     示例： 已复制const valueBucket1 = {    "NAME": "Lisa",    "AGE": 18,    "SALARY": 100.5,    "CODES": new Uint8Array([1, 2, 3, 4, 5])}const valueBucket2 = {    "NAME": "Jack",    "AGE": 19,    "SALARY": 101.5,    "CODES": new Uint8Array([6, 7, 8, 9, 10])}const valueBucket3 = {    "NAME": "Tom",    "AGE": 20,    "SALARY": 102.5,    "CODES": new Uint8Array([11, 12, 13, 14, 15])}
let valueBuckets = new Array(valueBucket1, valueBucket2, valueBucket3);rdbStore.batchInsert("EMPLOYEE", valueBuckets, function(status, insertNum) {    if (status) {        console.log("batchInsert is failed, status = " + status);        return;    }    console.log("batchInsert is successful, the number of values that were inserted = " + insertNum);})  batchInsertbatchInsert(table: string, values: Array<ValuesBucket>):Promise<number> 向目标表中插入一组数据，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    table  string  是  指定的目标表名。   values  Array<ValuesBucket>  是  表示要插入到表中的一组数据。     返回值：  类型  说明  Promise<number>  Promise对象。如果操作成功，返回插入的数据个数，否则返回-1。     示例： 已复制const valueBucket1 = {    "NAME": "Lisa",    "AGE": 18,    "SALARY": 100.5,    "CODES": new Uint8Array([1, 2, 3, 4, 5])}const valueBucket2 = {    "NAME": "Jack",    "AGE": 19,    "SALARY": 101.5,    "CODES": new Uint8Array([6, 7, 8, 9, 10])}const valueBucket3 = {    "NAME": "Tom",    "AGE": 20,    "SALARY": 102.5,    "CODES": new Uint8Array([11, 12, 13, 14, 15])}
let valueBuckets = new Array(valueBucket1, valueBucket2, valueBucket3);let promise = rdbStore.batchInsert("EMPLOYEE", valueBuckets);promise.then((insertNum) => {    console.log("batchInsert is successful, the number of values that were inserted = " + insertNum);}).catch((status) => {    console.log("batchInsert is failed, status = " + status);})  updateupdate(values: ValuesBucket, predicates: RdbPredicates, callback: AsyncCallback<number>):void 根据RdbPredicates的指定实例对象更新数据库中的数据，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    values  ValuesBucket  是  values指示数据库中要更新的数据行。键值对与数据库表的列名相关联。   predicates  RdbPredicates  是  RdbPredicates的实例对象指定的更新条件。   callback  AsyncCallback<number>  是  指定的callback回调方法。返回受影响的行数。     示例： 已复制const valueBucket = {    "NAME": "Rose",    "AGE": 22,    "SALARY": 200.5,    "CODES": new Uint8Array([1, 2, 3, 4, 5]),}let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Lisa")rdbStore.update(valueBucket, predicates, function (err, rows) {    if (err) {        console.info("Updated failed, err: " + err)        return    }    console.log("Updated row count: " + rows)})  updateupdate(values: ValuesBucket, predicates: RdbPredicates):Promise<number> 根据RdbPredicates的指定实例对象更新数据库中的数据，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    values  ValuesBucket  是  values指示数据库中要更新的数据行。键值对与数据库表的列名相关联。   predicates  RdbPredicates  是  RdbPredicates的实例对象指定的更新条件。     返回值：  类型  说明  Promise<number>  指定的Promise回调方法。返回受影响的行数。     示例： 已复制const valueBucket = {    "NAME": "Rose",    "AGE": 22,    "SALARY": 200.5,    "CODES": new Uint8Array([1, 2, 3, 4, 5]),}let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Lisa")let promise = rdbStore.update(valueBucket, predicates)promise.then(async (rows) => {    console.log("Updated row count: " + rows)}).catch((err) => {    console.info("Updated failed, err: " + err)})  deletedelete(predicates: RdbPredicates, callback: AsyncCallback<number>):void 根据RdbPredicates的指定实例对象从数据库中删除数据，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    predicates  RdbPredicates  是  RdbPredicates的实例对象指定的删除条件。   callback  AsyncCallback<number>  是  指定callback回调函数。返回受影响的行数。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Lisa")rdbStore.delete(predicates, function (err, rows) {    if (err) {        console.info("Delete failed, err: " + err)        return    }    console.log("Delete rows: " + rows)})  deletedelete(predicates: RdbPredicates):Promise<number> 根据RdbPredicates的指定实例对象从数据库中删除数据，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    predicates  RdbPredicates  是  RdbPredicates的实例对象指定的删除条件。     返回值：  类型  说明  Promise<number>  Promise对象。返回受影响的行数。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Lisa")let promise = rdbStore.delete(predicates)promise.then((rows) => {    console.log("Delete rows: " + rows)}).catch((err) => {    console.info("Delete failed, err: " + err)})  queryquery(predicates: RdbPredicates, columns: Array<string>, callback: AsyncCallback<ResultSet>):void 根据指定条件查询数据库中的数据，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    predicates  RdbPredicates  是  RdbPredicates的实例对象指定的查询条件。   columns  Array<string>  是  表示要查询的列。如果值为空，则查询应用于所有列。   callback  AsyncCallback<ResultSet>  是  指定callback回调函数。如果操作成功，则返回ResultSet对象。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Rose")rdbStore.query(predicates, ["ID", "NAME", "AGE", "SALARY", "CODES"], function (err, resultSet) {    if (err) {        console.info("Query failed, err: " + err)        return    }    console.log("ResultSet column names: " + resultSet.columnNames)    console.log("ResultSet column count: " + resultSet.columnCount)})  queryquery(predicates: RdbPredicates, columns?: Array<string>):Promise<ResultSet> 根据指定条件查询数据库中的数据，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    predicates  RdbPredicates  是  RdbPredicates的实例对象指定的查询条件。   columns  Array<string>  否  表示要查询的列。如果值为空，则查询应用于所有列。     返回值：  类型  说明  Promise<ResultSet>  Promise对象。如果操作成功，则返回ResultSet对象。     示例： 已复制let predicates = new data_rdb.RdbPredicates("EMPLOYEE")predicates.equalTo("NAME", "Rose")let promise = rdbStore.query(predicates, ["ID", "NAME", "AGE", "SALARY", "CODES"])promise.then((resultSet) => {    console.log("ResultSet column names: " + resultSet.columnNames)    console.log("ResultSet column count: " + resultSet.columnCount)}).catch((err) => {    console.info("Query failed, err: " + err)})  querySql8+querySql(sql: string, bindArgs: Array<ValueType>, callback: AsyncCallback<ResultSet>):void 根据指定SQL语句查询数据库中的数据，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    sql  string  是  指定要执行的SQL语句。   bindArgs  Array<ValueType>  是  SQL语句中参数的值。该值与sql参数语句中的占位符相对应。当sql参数语句完整时，该参数需为空数组。   callback  AsyncCallback<ResultSet>  是  指定callback回调函数。如果操作成功，则返回ResultSet对象。     示例： 已复制rdbStore.querySql("SELECT * FROM EMPLOYEE CROSS JOIN BOOK WHERE BOOK.NAME = ?", ['sanguo'], function (err, resultSet) {    if (err) {        console.info("Query failed, err: " + err)        return    }    console.log("ResultSet column names: " + resultSet.columnNames)    console.log("ResultSet column count: " + resultSet.columnCount)})  querySql8+querySql(sql: string, bindArgs?: Array<ValueType>):Promise<ResultSet> 根据指定SQL语句查询数据库中的数据，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    sql  string  是  指定要执行的SQL语句。   bindArgs  Array<ValueType>  否  SQL语句中参数的值。当sql参数语句完整时，该参数不填。     返回值：  类型  说明  Promise<ResultSet>  Promise对象。如果操作成功，则返回ResultSet对象。     示例： 已复制let promise = rdbStore.querySql("SELECT * FROM EMPLOYEE CROSS JOIN BOOK WHERE BOOK.NAME = 'sanguo'")promise.then((resultSet) => {    console.log("ResultSet column names: " + resultSet.columnNames)    console.log("ResultSet column count: " + resultSet.columnCount)}).catch((err) => {    console.info("Query failed, err: " + err)})  executeSql8+executeSql(sql: string, bindArgs: Array<ValueType>, callback: AsyncCallback<void>):void 执行包含指定参数但不返回值的SQL语句，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    sql  string  是  指定要执行的SQL语句。   bindArgs  Array<ValueType>  是  SQL语句中参数的值。该值与sql参数语句中的占位符相对应。当sql参数语句完整时，该参数需为空数组。   callback  AsyncCallback<void>  是  指定callback回调函数。     示例： 已复制const SQL_DELETE_TABLE = "DELETE FROM test WHERE name = ?"rdbStore.executeSql(SQL_CREATE_TABLE, ['zhangsan'], function(err) {    if (err) {        console.info("ExecuteSql failed, err: " + err)        return    }    console.info('Delete table done.')})  executeSql8+executeSql(sql: string, bindArgs?: Array<ValueType>):Promise<void> 执行包含指定参数但不返回值的SQL语句，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    sql  string  是  指定要执行的SQL语句。   bindArgs  Array<ValueType>  否  SQL语句中参数的值。当sql参数语句完整时，该参数不填。     返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     示例： 已复制const SQL_DELETE_TABLE = "DELETE FROM test WHERE name = 'zhangsan'"let promise = rdbStore.executeSql(SQL_DELETE_TABLE)promise.then(() => {    console.info('Delete table done.')}).catch((err) => {    console.info("ExecuteSql failed, err: " + err)})  beginTransaction8+beginTransaction():void 在开始执行SQL语句之前，开始事务。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 示例： 已复制import featureAbility from '@ohos.ability.featureAbility'let context = featureAbility.getContext()const STORE_CONFIG = { name: "RdbTest.db"}data_rdb.getRdbStore(context, STORE_CONFIG, 1, async function (err, rdbStore) {    rdbStore.beginTransaction()    const valueBucket = {        "name": "lisi",        "age": 18,        "salary": 100.5,        "blobType": new Uint8Array([1, 2, 3]),    }    await rdbStore.insert("test", valueBucket)    rdbStore.commit()})  commit8+commit():void 提交已执行的SQL语句。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 示例： 已复制import featureAbility from '@ohos.ability.featureAbility'let context = featureAbility.getContext()const STORE_CONFIG = { name: "RdbTest.db"}data_rdb.getRdbStore(context, STORE_CONFIG, 1, async function (err, rdbStore) {    rdbStore.beginTransaction()    const valueBucket = {        "name": "lisi",        "age": 18,        "salary": 100.5,        "blobType": new Uint8Array([1, 2, 3]),    }    await rdbStore.insert("test", valueBucket)    rdbStore.commit()})  rollBack8+rollBack():void 回滚已经执行的SQL语句。 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 示例： 已复制import featureAbility from '@ohos.ability.featureAbility'let context = featureAbility.getContext()const STORE_CONFIG = { name: "RdbTest.db"}data_rdb.getRdbStore(context, STORE_CONFIG, 1, async function (err, rdbStore) {    try {        rdbStore.beginTransaction()        const valueBucket = {            "id": 1,            "name": "lisi",            "age": 18,            "salary": 100.5,            "blobType": new Uint8Array([1, 2, 3]),        }        await rdbStore.insert("test", valueBucket)        rdbStore.commit()    } catch (e) {        rdbStore.rollBack()    }})  setDistributedTables8+setDistributedTables(tables: Array<string>, callback: AsyncCallback<void>): void 设置分布式列表，使用callback异步回调。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 需要权限： ohos.permission.DISTRIBUTED_DATASYNC 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    tables  Array<string>  是  要设置的分布式列表表名   callback  AsyncCallback<void>  是  指定callback回调函数。     示例： 已复制rdbStore.setDistributedTables(["EMPLOYEE"], function (err) {    if (err) {        console.info('SetDistributedTables failed, err: ' + err)        return    }    console.info('SetDistributedTables successfully.')})  setDistributedTables8+setDistributedTables(tables: Array<string>): Promise<void> 设置分布式列表，使用Promise异步回调。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 需要权限： ohos.permission.DISTRIBUTED_DATASYNC 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    tables  Array<string>  是  要设置的分布式列表表名。     返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     示例： 已复制let promise = rdbStore.setDistributedTables(["EMPLOYEE"])promise.then(() => {    console.info("SetDistributedTables successfully.")}).catch((err) => {    console.info("SetDistributedTables failed, err: " + err)})  obtainDistributedTableName8+obtainDistributedTableName(device: string, table: string, callback: AsyncCallback<string>): void 根据本地表名获取指定远程设备的分布式表名。在查询远程设备数据库时，需要使用分布式表名, 使用callback异步回调。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 需要权限： ohos.permission.DISTRIBUTED_DATASYNC 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    device  string  是  远程设备 。   table  string  是  本地表名。   callback  AsyncCallback<string>  是  指定的callback回调函数。如果操作成功，返回远程设备的分布式表名。     示例： 已复制rdbStore.obtainDistributedTableName("12345678abcde", "EMPLOYEE", function (err, tableName) {    if (err) {        console.info('ObtainDistributedTableName failed, err: ' + err)        return    }    console.info('ObtainDistributedTableName successfully, tableName=.' + tableName)})  obtainDistributedTableName8+obtainDistributedTableName(device: string, table: string): Promise<string> 根据本地表名获取指定远程设备的分布式表名。在查询远程设备数据库时，需要使用分布式表名，使用Promise异步回调。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 需要权限： ohos.permission.DISTRIBUTED_DATASYNC 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    device  string  是  远程设备。   table  string  是  本地表名。     返回值：  类型  说明  Promise<string>  Promise对象。如果操作成功，返回远程设备的分布式表名。     示例： 已复制let promise = rdbStore.obtainDistributedTableName("12345678abcde", "EMPLOYEE")promise.then((tableName) => {    console.info('ObtainDistributedTableName successfully, tableName= ' + tableName)}).catch((err) => {    console.info('ObtainDistributedTableName failed, err: ' + err)})  sync8+sync(mode: SyncMode, predicates: RdbPredicates, callback: AsyncCallback<Array<[string, number]>>): void 在设备之间同步数据, 使用callback异步回调。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 需要权限： ohos.permission.DISTRIBUTED_DATASYNC 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    mode  SyncMode  是  指同步模式。该值可以是推、拉。   predicates  RdbPredicates  是  约束同步数据和设备。   callback  AsyncCallback<Array<[string, number]>>  是  指定的callback回调函数，用于向调用者发送同步结果。string：设备ID；number：每个设备同步状态，0表示成功，其他值表示失败。     示例： 已复制let predicates = new data_rdb.RdbPredicates('EMPLOYEE')predicates.inDevices(['12345678abcde'])rdbStore.sync(data_rdb.SyncMode.SYNC_MODE_PUSH, predicates, function (err, result) {    if (err) {        console.log('Sync failed, err: ' + err)        return    }    console.log('Sync done.')    for (let i = 0; i < result.length; i++) {        console.log('device=' + result[i][0] + ' status=' + result[i][1])    }})  sync8+sync(mode: SyncMode, predicates: RdbPredicates): Promise<Array<[string, number]>> 在设备之间同步数据，使用Promise异步回调。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 需要权限： ohos.permission.DISTRIBUTED_DATASYNC 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    mode  SyncMode  是  指同步模式。该值可以是推、拉。   predicates  RdbPredicates  是  约束同步数据和设备。     返回值：  类型  说明  Promise<Array<[string, number]>>  Promise对象，用于向调用者发送同步结果。string：设备ID；number：每个设备同步状态，0表示成功，其他值表示失败。     示例： 已复制let predicates = new data_rdb.RdbPredicates('EMPLOYEE')predicates.inDevices(['12345678abcde'])let promise = rdbStore.sync(data_rdb.SyncMode.SYNC_MODE_PUSH, predicates)promise.then((result) =>{    console.log('Sync done.')    for (let i = 0; i < result.length; i++) {        console.log('device=' + result[i][0] + ' status=' + result[i][1])    }}).catch((err) => {    console.log('Sync failed')})  on('dataChange')8+on(event: 'dataChange', type: SubscribeType, observer: Callback<Array<string>>): void 注册数据库的观察者。当分布式数据库中的数据发生更改时，将调用回调。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    event  string  是  取值为'dataChange'，表示数据更改。   type  SubscribeType  是  订阅类型。   observer  Callback<Array<string>>  是  指分布式数据库中数据更改事件的观察者。Array<string>为数据库中的数据发生改变的对端设备ID。     示例： 已复制function storeObserver(devices) {    for (let i = 0; i < devices.length; i++) {        console.log('device=' + devices[i] + ' data changed')    }}try {    rdbStore.on('dataChange', data_rdb.SubscribeType.SUBSCRIBE_TYPE_REMOTE, storeObserver)} catch (err) {    console.log('Register observer failed')}  off('dataChange')8+off(event:'dataChange', type: SubscribeType, observer: Callback<Array<string>>): void 从数据库中删除指定类型的指定观察者, 使用callback异步回调。 
说明
此接口能力在HarmonyOS 3.1Release暂不支持。 
 系统能力： SystemCapability.DistributedDataManager.RelationalStore.Core 参数： 参数名  类型  必填  说明    event  string  是  取值为'dataChange'，表示数据更改。   type  SubscribeType  是  订阅类型。   observer  Callback<Array<string>>  是  指已注册的数据更改观察者。Array<string>为数据库中的数据发生改变的对端设备ID。     示例： 已复制function storeObserver(devices) {    for (let i = 0; i < devices.length; i++) {        console.log('device=' + devices[i] + ' data changed')    }}try {    rdbStore.off('dataChange', data_rdb.SubscribeType.SUBSCRIBE_TYPE_REMOTE, storeObserver)} catch (err) {    console.log('Unregister observer failed')}   上一篇 @ohos.data.storage (轻量级存储) 下一篇 @ohos.document (文件交互) 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。