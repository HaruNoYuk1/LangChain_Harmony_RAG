您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块Notification.publishNotification.publishNotification.cancelNotification.cancelNotification.cancelNotification.cancelAllNotification.cancelAllNotification.addSlotNotification.addSlotNotification.getSlotNotification.getSlotNotification.getSlotsNotification.getSlotsNotification.removeSlotNotification.removeSlotNotification.removeAllSlotsNotification.removeAllSlotsNotification.getActiveNotificationCountNotification.getActiveNotificationCountNotification.getActiveNotificationsNotification.getActiveNotificationsNotification.cancelGroup8+Notification.cancelGroup8+Notification.isSupportTemplate8+Notification.isSupportTemplate8+Notification.requestEnableNotification8+Notification.requestEnableNotification8+Notification.isDistributedEnabled8+Notification.isDistributedEnabled8+ContentTypeSlotLevelBundleOptionNotificationKeySlotTypeNotificationActionButtonNotificationBasicContentNotificationLongTextContentNotificationMultiLineContentNotificationPictureContentNotificationContentNotificationFlags8+NotificationRequestDistributedOptions8+NotificationSlotNotificationTemplate8+NotificationUserInput8+@ohos.notification (Notification模块) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
 本模块提供通知管理的能力，包括发布、取消发布通知，创建、获取、移除通知通道，订阅、取消订阅通知，获取通知的使能状态、角标使能状态，获取通知的相关信息等。 
说明
本模块首批接口从API version 7开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。 通知订阅和取消订阅仅对系统应用开放。 
 导入模块已复制import Notification from '@ohos.notification';  Notification.publishpublish(request: NotificationRequest, callback: AsyncCallback<void>): void 发布通知（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    request  NotificationRequest  是  用于设置要发布通知的内容和相关配置信息。   callback  AsyncCallback<void>  是  发布通知的回调方法。     示例： 已复制// publish回调function publishCallback(err) {    if (err.code) {        console.info("publish failed " + JSON.stringify(err));    } else {        console.info("publish success");    }}// 通知Request对象let notificationRequest = {    id: 1,    content: {        contentType: Notification.ContentType.NOTIFICATION_CONTENT_BASIC_TEXT,        normal: {            title: "test_title",            text: "test_text",            additionalText: "test_additionalText"        }    }};Notification.publish(notificationRequest, publishCallback);  Notification.publishpublish(request: NotificationRequest): Promise<void> 发布通知（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    request  NotificationRequest  是  用于设置要发布通知的内容和相关配置信息。     示例： 已复制// 通知Request对象let notificationRequest = {    notificationId: 1,    content: {        contentType: Notification.ContentType.NOTIFICATION_CONTENT_BASIC_TEXT,        normal: {            title: "test_title",            text: "test_text",            additionalText: "test_additionalText"        }    }};Notification.publish(notificationRequest).then(() => {    console.info("publish success");});  Notification.cancelcancel(id: number, label: string, callback: AsyncCallback<void>): void 通过通知ID和通知标签取消已发布的通知（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    id  number  是  通知ID。   label  string  是  通知标签。   callback  AsyncCallback<void>  是  表示被指定的回调方法。     示例： 已复制// cancel回调function cancelCallback(err) {    if (err.code) {        console.info("cancel failed " + JSON.stringify(err));    } else {        console.info("cancel success");    }}Notification.cancel(0, "label", cancelCallback);  Notification.cancelcancel(id: number, label?: string): Promise<void> 取消与指定通知ID相匹配的已发布通知，label可以指定也可以不指定（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    id  number  是  通知ID。   label  string  否  通知标签。     示例： 已复制Notification.cancel(0).then(() => {    console.info("cancel success");});  Notification.cancelcancel(id: number, callback: AsyncCallback<void>): void 取消与指定通知ID相匹配的已发布通知（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    id  number  是  通知ID。   callback  AsyncCallback<void>  是  表示被指定的回调方法。     示例： 已复制// cancel回调function cancelCallback(err) {    if (err.code) {        console.info("cancel failed " + JSON.stringify(err));    } else {        console.info("cancel success");    }}Notification.cancel(0, cancelCallback);  Notification.cancelAllcancelAll(callback: AsyncCallback<void>): void 取消所有已发布的通知（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  表示被指定的回调方法。     示例： 已复制// cancel回调function cancelAllCallback(err) {    if (err.code) {        console.info("cancelAll failed " + JSON.stringify(err));    } else {        console.info("cancelAll success");    }}Notification.cancelAll(cancelAllCallback);  Notification.cancelAllcancelAll(): Promise<void> 取消所有已发布的通知（Promise形式）。 系统能力：SystemCapability.Notification.Notification 示例： 已复制Notification.cancelAll().then(() => {    console.info("cancelAll success");});  Notification.addSlotaddSlot(type: SlotType, callback: AsyncCallback<void>): void 创建指定类型的通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    type  SlotType  是  要创建的通知通道的类型。   callback  AsyncCallback<void>  是  表示被指定的回调方法。     示例： 已复制// addslot回调function addSlotCallBack(err) {    if (err.code) {        console.info("addSlot failed " + JSON.stringify(err));    } else {        console.info("addSlot success");    }}Notification.addSlot(Notification.SlotType.SOCIAL_COMMUNICATION, addSlotCallBack);  Notification.addSlotaddSlot(type: SlotType): Promise<void> 创建指定类型的通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    type  SlotType  是  要创建的通知通道的类型。     示例： 已复制Notification.addSlot(Notification.SlotType.SOCIAL_COMMUNICATION).then(() => {    console.info("addSlot success");});  Notification.getSlotgetSlot(slotType: SlotType, callback: AsyncCallback<NotificationSlot>): void 获取一个指定类型的通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    slotType  SlotType  是  通知渠道类型，目前分为社交通信、服务提醒、内容咨询和其他类型。   callback  AsyncCallback<NotificationSlot>  是  表示被指定的回调方法。     示例： 已复制// getSlot回调function getSlotCallback(err, data) {    if (err.code) {        console.info("getSlot failed " + JSON.stringify(err));    } else {        console.info("getSlot success");    }}let slotType = Notification.SlotType.SOCIAL_COMMUNICATION;Notification.getSlot(slotType, getSlotCallback);  Notification.getSlotgetSlot(slotType: SlotType): Promise<NotificationSlot> 获取一个指定类型的通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    slotType  SlotType  是  通知渠道类型，目前分为社交通信、服务提醒、内容咨询和其他类型。     返回值：  类型  说明  Promise<NotificationSlot>  以Promise形式返回获取一个通知通道。     示例： 已复制let slotType = Notification.SlotType.SOCIAL_COMMUNICATION;Notification.getSlot(slotType).then((data) => {    console.info("getSlot success, data: " + JSON.stringify(data));});  Notification.getSlotsgetSlots(callback: AsyncCallback<Array<NotificationSlot>>): void 获取此应用程序的所有通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<Array<NotificationSlot>>  是  以callback形式返回获取此应用程序的所有通知通道的结果。     示例： 已复制// getSlots回调function getSlotsCallback(err, data) {    if (err.code) {        console.info("getSlots failed " + JSON.stringify(err));    } else {        console.info("getSlots success");    }}Notification.getSlots(getSlotsCallback);  Notification.getSlotsgetSlots(): Promise<Array<NotificationSlot>> 获取此应用程序的所有通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 返回值：  类型  说明  Promise<Array<NotificationSlot>>  以Promise形式返回获取此应用程序的所有通知通道的结果。     示例： 已复制Notification.getSlots().then((data) => {    console.info("getSlots success, data: " + JSON.stringify(data));});  Notification.removeSlotremoveSlot(slotType: SlotType, callback: AsyncCallback<void>): void 删除指定类型的通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    slotType  SlotType  是  通知渠道类型,目前分为社交通信、服务提醒、内容咨询和其他类型。   callback  AsyncCallback<void>  是  表示被指定的回调方法。     示例： 已复制// removeSlot回调function removeSlotCallback(err) {    if (err.code) {        console.info("removeSlot failed " + JSON.stringify(err));    } else {        console.info("removeSlot success");    }}let slotType = Notification.SlotType.SOCIAL_COMMUNICATION;Notification.removeSlot(slotType,removeSlotCallback);  Notification.removeSlotremoveSlot(slotType: SlotType): Promise<void> 删除指定类型的通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    slotType  SlotType  是  通知渠道类型,目前分为社交通信、服务提醒、内容咨询和其他类型。     示例： 已复制let slotType = Notification.SlotType.SOCIAL_COMMUNICATION;Notification.removeSlot(slotType).then(() => {    console.info("removeSlot success");});  Notification.removeAllSlotsremoveAllSlots(callback: AsyncCallback<void>): void 删除所有通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  表示被指定的回调方法。     示例： 已复制function removeAllCallBack(err) {    if (err.code) {        console.info("removeAllSlots failed " + JSON.stringify(err));    } else {        console.info("removeAllSlots success");    }}Notification.removeAllSlots(removeAllCallBack);  Notification.removeAllSlotsremoveAllSlots(): Promise<void> 删除所有通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 示例： 已复制Notification.removeAllSlots().then(() => {    console.info("removeAllSlots success");});  Notification.getActiveNotificationCountgetActiveNotificationCount(callback: AsyncCallback<number>): void 获取当前应用未删除的通知数（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<number>  是  获取未删除通知数回调函数。     示例： 已复制function getActiveNotificationCountCallback(err, data) {    if (err.code) {        console.info("getActiveNotificationCount failed " + JSON.stringify(err));    } else {        console.info("getActiveNotificationCount success");    }}
Notification.getActiveNotificationCount(getActiveNotificationCountCallback);  Notification.getActiveNotificationCountgetActiveNotificationCount(): Promise<number> 获取当前应用未删除的通知数（Promise形式）。 系统能力：SystemCapability.Notification.Notification 返回值：  类型  说明  Promise<number>  以Promise形式返回获取当前应用未删除通知数。     示例： 已复制Notification.getActiveNotificationCount().then((data) => {    console.info("getActiveNotificationCount success, data: " + JSON.stringify(data));});  Notification.getActiveNotificationsgetActiveNotifications(callback: AsyncCallback<Array<NotificationRequest>>): void 获取当前应用未删除的通知列表（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<Array<NotificationRequest>>  是  获取当前应用通知列表回调函数。     示例： 已复制function getActiveNotificationsCallback(err, data) {    if (err.code) {        console.info("getActiveNotifications failed " + JSON.stringify(err));    } else {        console.info("getActiveNotifications success");    }}
Notification.getActiveNotifications(getActiveNotificationsCallback);  Notification.getActiveNotificationsgetActiveNotifications(): Promise<Array<NotificationRequest>> 获取当前应用未删除的通知列表（Promise形式）。 系统能力：SystemCapability.Notification.Notification 返回值：  类型  说明  Promise<Array<NotificationRequest>>  以Promise形式返回获取当前应用通知列表。     示例： 已复制Notification.getActiveNotifications().then((data) => {    console.info("removeGroupByBundle success, data: " + JSON.stringify(data));});  Notification.cancelGroup8+cancelGroup(groupName: string, callback: AsyncCallback<void>): void 取消本应用指定组下的通知（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    groupName  string  是  通知组名称，此名称需要在发布通知时通过NotificationRequest对象指定。   callback  AsyncCallback<void>  是  取消本应用指定组下通知的回调函数。     示例： 已复制function cancelGroupCallback(err) {    if (err.code) {        console.info("cancelGroup failed " + JSON.stringify(err));    } else {        console.info("cancelGroup success");    }}
let groupName = "GroupName";
Notification.cancelGroup(groupName, cancelGroupCallback);  Notification.cancelGroup8+cancelGroup(groupName: string): Promise<void> 取消本应用指定组下的通知（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    groupName  string  是  通知组名称。     示例： 已复制let groupName = "GroupName";Notification.cancelGroup(groupName).then(() => {    console.info("cancelGroup success");});  Notification.isSupportTemplate8+isSupportTemplate(templateName: string, callback: AsyncCallback<boolean>): void 查询模板是否存在（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    templateName  string  是  模板名称。   callback  AsyncCallback<boolean>  是  查询模板是否存在的回调函数。     示例： 已复制let templateName = 'process';function isSupportTemplateCallback(err, data) {    if (err.code) {        console.info("isSupportTemplate failed " + JSON.stringify(err));    } else {        console.info("isSupportTemplate success");    }}
Notification.isSupportTemplate(templateName, isSupportTemplateCallback);  Notification.isSupportTemplate8+isSupportTemplate(templateName: string): Promise<boolean> 查询模板是否存在（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    templateName  string  是  模板名称。     返回值：  类型  说明  Promise<boolean>  Promise方式返回模板是否存在的结果。     示例： 已复制let templateName = 'process';
Notification.isSupportTemplate(templateName).then((data) => {    console.info("isSupportTemplate success, data: " + JSON.stringify(data));});  Notification.requestEnableNotification8+requestEnableNotification(callback: AsyncCallback<void>): void 应用请求通知使能（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  应用请求通知使能的回调函数。     示例： 已复制function requestEnableNotificationCallback(err) {    if (err.code) {        console.info("requestEnableNotification failed " + JSON.stringify(err));    } else {        console.info("requestEnableNotification success");    }};
Notification.requestEnableNotification(requestEnableNotificationCallback);  Notification.requestEnableNotification8+requestEnableNotification(): Promise<void> 应用请求通知使能（Promise形式）。 系统能力：SystemCapability.Notification.Notification 示例： 已复制Notification.requestEnableNotification().then(() => {    console.info("requestEnableNotification success");});  Notification.isDistributedEnabled8+isDistributedEnabled(callback: AsyncCallback<boolean>): void 查询设备是否支持分布式通知（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<boolean>  是  设备是否支持分布式通知的回调函数。     示例： 已复制function isDistributedEnabledCallback(err, data) {    if (err.code) {        console.info("isDistributedEnabled failed " + JSON.stringify(err));    } else {        console.info("isDistributedEnabled success " + JSON.stringify(data));    }};
Notification.isDistributedEnabled(isDistributedEnabledCallback);  Notification.isDistributedEnabled8+isDistributedEnabled(): Promise<boolean> 查询设备是否支持分布式通知（Promise形式）。 系统能力：SystemCapability.Notification.Notification 返回值：  类型  说明  Promise<boolean>  Promise方式返回设备是否支持分布式通知的结果。     示例： 已复制Notification.isDistributedEnabled().then((data) => {    console.info("isDistributedEnabled success, data: " + JSON.stringify(data));});  ContentType系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  值  说明    NOTIFICATION_CONTENT_BASIC_TEXT  NOTIFICATION_CONTENT_BASIC_TEXT  普通类型通知。   NOTIFICATION_CONTENT_LONG_TEXT  NOTIFICATION_CONTENT_LONG_TEXT  长文本类型通知。   NOTIFICATION_CONTENT_PICTURE  NOTIFICATION_CONTENT_PICTURE  图片类型通知。   NOTIFICATION_CONTENT_CONVERSATION  NOTIFICATION_CONTENT_CONVERSATION  社交类型通知。   NOTIFICATION_CONTENT_MULTILINE  NOTIFICATION_CONTENT_MULTILINE  多行文本类型通知。      SlotLevel系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  值  说明    LEVEL_NONE  0  表示关闭通知功能。   LEVEL_MIN  1  表示通知功能已启用，但状态栏中不显示通知图标，且没有横幅或提示音。   LEVEL_LOW  2  表示通知功能已启用，且状态栏中显示通知图标，但没有横幅或提示音。   LEVEL_DEFAULT  3  表示通知功能已启用，状态栏中显示通知图标，没有横幅但有提示音。   LEVEL_HIGH  4  表示通知功能已启用，状态栏中显示通知图标，有横幅和提示音。      BundleOption系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    bundle  string  是  是  应用的包信息。   uid  number  是  是  用户ID。      NotificationKey系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    id  number  是  是  通知ID。   label  string  是  是  通知标签。      SlotType系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  值  说明    UNKNOWN_TYPE  0  未知类型。   SOCIAL_COMMUNICATION  1  社交类型。   SERVICE_INFORMATION  2  服务类型。   CONTENT_INFORMATION  3  内容类型。   OTHER_TYPES  0xFFFF  其他类型。      NotificationActionButton描述通知中显示的操作按钮。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    title  string  是  是  按钮标题。   wantAgent  WantAgent  是  是  点击按钮时触发的WantAgent。   extras  { [key: string]: any }  是  是  按钮扩展信息。   userInput8+  NotificationUserInput  是  是  用户输入对象实例。      NotificationBasicContent描述普通文本通知。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    title  string  是  是  通知标题。   text  string  是  是  通知内容。   additionalText  string  是  是  通知附加内容，是对通知内容的补充。      NotificationLongTextContent描述长文本通知。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    title  string  是  是  通知标题。   text  string  是  是  通知内容。   additionalText  string  是  是  通知附加内容，是对通知内容的补充。   longText  string  是  是  通知的长文本。   briefText  string  是  是  通知概要内容，是对通知内容的总结。   expandedTitle  string  是  是  通知展开时的标题。      NotificationMultiLineContent描述多行文本通知。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    title  string  是  是  通知标题。   text  string  是  是  通知内容。   additionalText  string  是  是  通知附加内容，是对通知内容的补充。   briefText  string  是  是  通知概要内容，是对通知内容的总结。   longTitle  string  是  是  通知展开时的标题。   lines  Array<string>  是  是  通知的多行文本。      NotificationPictureContent描述附有图片的通知。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    title  string  是  是  通知标题。   text  string  是  是  通知内容。   additionalText  string  是  是  通知附加内容，是对通知内容的补充。   briefText  string  是  是  通知概要内容，是对通知内容的总结。   expandedTitle  string  是  是  通知展开时的标题。   picture  image.PixelMap  是  是  通知的图片内容。      NotificationContent描述通知类型。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    contentType  ContentType  是  是  通知内容类型。   normal  NotificationBasicContent  是  是  基本类型通知内容。   longText  NotificationLongTextContent  是  是  长文本类型通知内容。   multiLine  NotificationMultiLineContent  是  是  多行类型通知内容。   picture  NotificationPictureContent  是  是  图片类型通知内容。      NotificationFlags8+描述通知标志的实例。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    soundEnabled  NotificationFlagStatus  是  否  是否启用声音提示。   vibrationEnabled  NotificationFlagStatus  是  否  是否启用振动提醒功能。      NotificationRequest描述通知的请求。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    content  NotificationContent  是  是  通知内容。   id  number  是  是  通知ID。   slotType  SlotType  是  是  通道类型。   isOngoing  boolean  是  是  是否进行时通知。   isUnremovable  boolean  是  是  是否可移除。   deliveryTime  number  是  是  通知发送时间。   tapDismissed  boolean  是  是  通知是否自动清除。   autoDeletedTime  number  是  是  自动清除的时间。   wantAgent  WantAgent  是  是  WantAgent封装了应用的行为意图，点击通知时触发该行为。   extraInfo  {[key: string]: any}  是  是  扩展参数。   color  number  是  是  通知背景颜色。预留能力，暂未支持。   colorEnabled  boolean  是  是  通知背景颜色是否使能。预留能力，暂未支持。   isAlertOnce  boolean  是  是  设置是否仅有一次此通知提醒。   isStopwatch  boolean  是  是  是否显示已用时间。   isCountDown  boolean  是  是  是否显示倒计时时间。   isFloatingIcon  boolean  是  是  是否显示状态栏图标。   label  string  是  是  通知标签。   badgeIconStyle  number  是  是  通知角标类型。   showDeliveryTime  boolean  是  是  是否显示分发时间。   actionButtons  Array<NotificationActionButton>  是  是  通知按钮，最多两个按钮。   smallIcon  image.PixelMap  是  是  通知小图标。可选字段，大小不超过30KB。   largeIcon  image.PixelMap  是  是  通知大图标。可选字段，大小不超过30KB。   creatorBundleName  string  是  否  创建通知的包名。   creatorUid  number  是  否  创建通知的UID。   creatorPid  number  是  否  创建通知的PID。   creatorUserId8+  number  是  否  创建通知的UserId。   hashCode  string  是  否  通知唯一标识。   groupName8+  string  是  是  组通知名称。   template8+  NotificationTemplate  是  是  通知模板。   distributedOption8+  DistributedOptions  是  是  分布式通知的选项。   notificationFlags8+  NotificationFlags  是  否  获取NotificationFlags。   removalWantAgent9+  WantAgent  是  是  当移除通知时，通知将被重定向到的WantAgent实例。   badgeNumber9+  number  是  是  应用程序图标上显示的通知数。      DistributedOptions8+描述分布式选项。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    isDistributed  boolean  是  是  是否为分布式通知。   supportDisplayDevices  Array<string>  是  是  可以同步通知到的设备列表。   supportOperateDevices  Array<string>  是  是  可以打开通知的设备列表。      NotificationSlot描述通知槽 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    type  SlotType  是  是  通道类型。   level  number  是  是  通知级别，不设置则根据通知渠道类型有默认值。   desc  string  是  是  通知渠道描述信息。   badgeFlag  boolean  是  是  是否显示角标。   bypassDnd  boolean  是  是  置是否在系统中绕过免打扰模式。   lockscreenVisibility  number  是  是  在锁定屏幕上显示通知的模式。   vibrationEnabled  boolean  是  是  是否可振动。   sound  string  是  是  通知提示音。   lightEnabled  boolean  是  是  是否闪灯。   lightColor  number  是  是  通知灯颜色。   vibrationValues  Array<number>  是  是  通知振动样式。   enabled9+  boolean  是  否  此通知插槽中的启停状态。      NotificationTemplate8+通知模板。 系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    name  string  是  是  模板名称。   data  {[key:string]: Object}  是  是  模板数据。      NotificationUserInput8+保存用户输入的通知消息。 系统能力：SystemCapability.Notification.Notification 名称  类型  可读  可写  说明    inputKey  string  是  是  用户输入时用于标识此输入的key。       上一篇 系统公共事件定义(待停用) 下一篇 application 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。