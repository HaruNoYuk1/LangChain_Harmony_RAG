您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。属性UIAbilityContext.startAbilityUIAbilityContext.startAbilityUIAbilityContext.startAbilityUIAbilityContext.startAbilityForResultUIAbilityContext.startAbilityForResultUIAbilityContext.startAbilityForResultUIAbilityContext.terminateSelfUIAbilityContext.terminateSelfUIAbilityContext.terminateSelfWithResultUIAbilityContext.terminateSelfWithResultUIAbilityContext.connectServiceExtensionAbilityUIAbilityContext.disconnectServiceExtensionAbilityUIAbilityContext.disconnectServiceExtensionAbilityUIAbilityContext.startAbilityByCallUIAbilityContext.setMissionLabelUIAbilityContext.setMissionLabelUIAbilityContext.restoreWindowStageUIAbilityContext.isTerminatingUIAbilityContext.requestDialogServiceUIAbilityContext.requestDialogServiceUIAbilityContext 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
 UIAbilityContext是UIAbility的上下文环境，继承自Context。 UIAbilityContext模块提供允许访问特定UIAbility的资源的能力，包括对UIAbility的启动、停止的设置、获取caller通信接口、拉起弹窗请求用户授权等。 
说明
本模块首批接口从API version 9开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。本模块接口仅可在Stage模型下使用。 
 属性系统能力：以下各项对应的系统能力均为SystemCapability.Ability.AbilityRuntime.Core 名称  类型  可读  可写  说明    abilityInfo  AbilityInfo  是  否  Abilityinfo相关信息   currentHapModuleInfo  HapModuleInfo  是  否  当前hap包的信息   config  Configuration  是  否  表示配置信息。      UIAbilityContext.startAbilitystartAbility(want: Want, callback: AsyncCallback<void>): void; 启动Ability（callback形式）。 使用规则： 调用方应用位于后台时，使用该接口启动Ability需申请ohos.permission.START_ABILITIES_FROM_BACKGROUND权限目标Ability的visible属性若配置为false，调用方应用需申请ohos.permission.START_INVISIBLE_ABILITY权限组件启动规则详见：组件启动规则（Stage模型） 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动Ability的want信息。   callback  AsyncCallback<void>  是  callback形式返回启动结果     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000004  Visibility verification failed.   16000005  Static permission denied. The specified process does not have the permission.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000008  Crowdtest App Expiration.   16000009  Can not start ability in wukong mode.   16000010  Can not operation with continue flag.   16000011  Context does not exist.   16000051  Network error. The network is abnormal.   16000052  Free install not support. The application does not support freeinstall   16000053  Not top ability. The application is not top ability.   16000054  Free install busyness. There are concurrent tasks, waiting for retry.   16000055  Free install timeout.   16000056  Can not free install other ability.   16000057  Not support cross device free install.   16200001  Caller released. The caller has been released.   16000050  Internal Error.     示例： 已复制let want = {  bundleName: 'com.example.myapp',  abilityName: 'MyAbility'};
try {  this.context.startAbility(want, (error) => {    if (error.code) {      // 处理业务逻辑错误      console.log('startAbility failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));      return;    }    // 执行正常业务    console.log('startAbility succeed');  });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.startAbilitystartAbility(want: Want, options: StartOptions, callback: AsyncCallback<void>): void; 启动Ability（callback形式）。 使用规则： 调用方应用位于后台时，使用该接口启动Ability需申请ohos.permission.START_ABILITIES_FROM_BACKGROUND权限目标Ability的visible属性若配置为false，调用方应用需申请ohos.permission.START_INVISIBLE_ABILITY权限组件启动规则详见：组件启动规则（Stage模型） 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动Ability的want信息。   options  StartOptions  是  启动Ability所携带的参数。   callback  AsyncCallback<void>  是  callback形式返回启动结果。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000004  Visibility verification failed.   16000005  Static permission denied. The specified process does not have the permission.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000008  Crowdtest App Expiration.   16000009  Can not start ability in wukong mode.   16000010  Can not operation with continue flag.   16000011  Context does not exist.   16000051  Network error. The network is abnormal.   16000052  Free install not support. The application does not support freeinstall   16000053  Not top ability. The application is not top ability.   16000054  Free install busyness. There are concurrent tasks, waiting for retry.   16000055  Free install timeout.   16000056  Can not free install other ability.   16000057  Not support cross device free install.   16200001  Caller released. The caller has been released.   16000050  Internal Error.     示例： 已复制let want = {  deviceId: '',  bundleName: 'com.extreme.test',  abilityName: 'MainAbility'};let options = {  displayId: 0};
try {  this.context.startAbility(want, options, (error) => {    if (error.code) {      // 处理业务逻辑错误      console.log('startAbility failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));      return;    }    // 执行正常业务    console.log('startAbility succeed');  });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.startAbilitystartAbility(want: Want, options?: StartOptions): Promise<void>; 启动Ability（promise形式）。 使用规则： 调用方应用位于后台时，使用该接口启动Ability需申请ohos.permission.START_ABILITIES_FROM_BACKGROUND权限目标Ability的visible属性若配置为false，调用方应用需申请ohos.permission.START_INVISIBLE_ABILITY权限组件启动规则详见：组件启动规则（Stage模型） 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动Ability的want信息。   options  StartOptions  否  启动Ability所携带的参数。     返回值：  类型  说明  Promise<void>  Promise形式返回启动结果。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000004  Visibility verification failed.   16000005  Static permission denied. The specified process does not have the permission.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000008  Crowdtest App Expiration.   16000009  Can not start ability in wukong mode.   16000010  Can not operation with continue flag.   16000011  Context does not exist.   16000051  Network error. The network is abnormal.   16000052  Free install not support. The application does not support freeinstall   16000053  Not top ability. The application is not top ability.   16000054  Free install busyness. There are concurrent tasks, waiting for retry.   16000055  Free install timeout.   16000056  Can not free install other ability.   16000057  Not support cross device free install.   16200001  Caller released. The caller has been released.   16000050  Internal Error.     示例： 已复制let want = {  bundleName: 'com.example.myapp',  abilityName: 'MyAbility'};let options = {    displayId: 0,};
try {  this.context.startAbility(want, options)    .then((data) => {      // 执行正常业务      console.log('startAbility succeed');    })    .catch((error) => {      // 处理业务逻辑错误      console.log('startAbility failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));    });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.startAbilityForResultstartAbilityForResult(want: Want, callback: AsyncCallback<AbilityResult>): void; 启动一个Ability。Ability被启动后，有如下情况(callback形式): 正常情况下可通过调用terminateSelfWithResult接口使之终止并且返回结果给调用方。异常情况下比如杀死Ability会返回异常信息给调用方, 异常信息中resultCode为-1。如果被启动的Ability模式是单实例模式, 不同应用多次调用该接口启动这个Ability，当这个Ability调用terminateSelfWithResult接口使之终止时，只将正常结果返回给最后一个调用方, 其它调用方返回异常信息, 异常信息中resultCode为-1。 使用规则： 调用方应用位于后台时，使用该接口启动Ability需申请ohos.permission.START_ABILITIES_FROM_BACKGROUND权限目标Ability的visible属性若配置为false，调用方应用需申请ohos.permission.START_INVISIBLE_ABILITY权限组件启动规则详见：组件启动规则（Stage模型） 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动Ability的want信息。   callback  AsyncCallback<AbilityResult>  是  执行结果回调函数。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000004  Visibility verification failed.   16000005  Static permission denied. The specified process does not have the permission.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000008  Crowdtest App Expiration.   16000009  Can not start ability in wukong mode.   16000010  Can not operation with continue flag.   16000011  Context does not exist.   16000051  Network error. The network is abnormal.   16000052  Free install not support. The application does not support freeinstall   16000053  Not top ability. The application is not top ability.   16000054  Free install busyness. There are concurrent tasks, waiting for retry.   16000055  Free install timeout.   16000056  Can not free install other ability.   16000057  Not support cross device free install.   16200001  Caller released. The caller has been released.   16000050  Internal Error.     示例： 已复制let want = {  deviceId: '',  bundleName: 'com.extreme.test',  abilityName: 'MainAbility'};
try {  this.context.startAbilityForResult(want, (error, result) => {    if (error.code) {      // 处理业务逻辑错误      console.log('startAbilityForResult failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));      return;    }    // 执行正常业务    console.log('startAbilityForResult succeed, result.resultCode = ' +      result.resultCode)  });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.startAbilityForResultstartAbilityForResult(want: Want, options: StartOptions, callback: AsyncCallback<AbilityResult>): void; 启动一个Ability。Ability被启动后，有如下情况(callback形式): 正常情况下可通过调用terminateSelfWithResult接口使之终止并且返回结果给调用方。异常情况下比如杀死Ability会返回异常信息给调用方, 异常信息中resultCode为-1。如果被启动的Ability模式是单实例模式, 不同应用多次调用该接口启动这个Ability，当这个Ability调用terminateSelfWithResult接口使之终止时，只将正常结果返回给最后一个调用方, 其它调用方返回异常信息, 异常信息中resultCode为-1。 使用规则： 调用方应用位于后台时，使用该接口启动Ability需申请ohos.permission.START_ABILITIES_FROM_BACKGROUND权限目标Ability的visible属性若配置为false，调用方应用需申请ohos.permission.START_INVISIBLE_ABILITY权限组件启动规则详见：组件启动规则（Stage模型） 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动Ability的want信息。   options  StartOptions  是  启动Ability所携带的参数。   callback  AsyncCallback<AbilityResult>  是  执行结果回调函数。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000004  Visibility verification failed.   16000005  Static permission denied. The specified process does not have the permission.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000008  Crowdtest App Expiration.   16000009  Can not start ability in wukong mode.   16000010  Can not operation with continue flag.   16000011  Context does not exist.   16000051  Network error. The network is abnormal.   16000052  Free install not support. The application does not support freeinstall   16000053  Not top ability. The application is not top ability.   16000054  Free install busyness. There are concurrent tasks, waiting for retry.   16000055  Free install timeout.   16000056  Can not free install other ability.   16000057  Not support cross device free install.   16200001  Caller released. The caller has been released.   16000050  Internal Error.     示例： 已复制let want = {  deviceId: '',  bundleName: 'com.extreme.test',  abilityName: 'MainAbility'};let options = {  displayId: 0,};
try {  this.context.startAbilityForResult(want, options, (error, result) => {    if (error.code) {      // 处理业务逻辑错误      console.log('startAbilityForResult failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));      return;    }    // 执行正常业务    console.log('startAbilityForResult succeed, result.resultCode = ' +      result.resultCode)  });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.startAbilityForResultstartAbilityForResult(want: Want, options?: StartOptions): Promise<AbilityResult>; 启动一个Ability。Ability被启动后，有如下情况(promise形式): 正常情况下可通过调用terminateSelfWithResult接口使之终止并且返回结果给调用方。异常情况下比如杀死Ability会返回异常信息给调用方, 异常信息中resultCode为-1。如果被启动的Ability模式是单实例模式, 不同应用多次调用该接口启动这个Ability，当这个Ability调用terminateSelfWithResult接口使之终止时，只将正常结果返回给最后一个调用方, 其它调用方返回异常信息, 异常信息中resultCode为-1。 使用规则： 调用方应用位于后台时，使用该接口启动Ability需申请ohos.permission.START_ABILITIES_FROM_BACKGROUND权限目标Ability的visible属性若配置为false，调用方应用需申请ohos.permission.START_INVISIBLE_ABILITY权限组件启动规则详见：组件启动规则（Stage模型） 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动Ability的want信息。   options  StartOptions  否  启动Ability所携带的参数。     返回值：  类型  说明  Promise<AbilityResult>  Promise形式返回执行结果。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000004  Visibility verification failed.   16000005  Static permission denied. The specified process does not have the permission.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000008  Crowdtest App Expiration.   16000009  Can not start ability in wukong mode.   16000010  Can not operation with continue flag.   16000011  Context does not exist.   16000051  Network error. The network is abnormal.   16000052  Free install not support. The application does not support freeinstall   16000053  Not top ability. The application is not top ability.   16000054  Free install busyness. There are concurrent tasks, waiting for retry.   16000055  Free install timeout.   16000056  Can not free install other ability.   16000057  Not support cross device free install.   16200001  Caller released. The caller has been released.   16000050  Internal Error.     示例： 已复制let want = {  bundleName: 'com.example.myapp',  abilityName: 'MyAbility'};let options = {    displayId: 0,};
try {  this.context.startAbilityForResult(want, options)    .then((result) => {      // 执行正常业务      console.log('startAbilityForResult succeed, result.resultCode = ' + result.resultCode);    })    .catch((error) => {      // 处理业务逻辑错误      console.log('startAbilityForResult failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));    });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.terminateSelfterminateSelf(callback: AsyncCallback<void>): void; 停止Ability自身（callback形式）。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  回调函数，返回接口调用是否成功的结果。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000011  Context does not exist.   16000050  Internal Error.     示例： 已复制this.context.terminateSelf((error) => {  if (error.code) {    // 处理业务逻辑错误    console.log('terminateSelf failed, error.code: ' + JSON.stringify(error.code) +      ' error.message: ' + JSON.stringify(error.message));    return;  }  // 执行正常业务  console.log('terminateSelf succeed');});  UIAbilityContext.terminateSelfterminateSelf(): Promise<void>; 停止Ability自身（promise形式）。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 返回值：  类型  说明  Promise<void>  返回一个Promise，包含接口的结果。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000011  Context does not exist.   16000050  Internal Error.     示例： 已复制this.context.terminateSelf().then((data) => {  // 执行正常业务  console.log('terminateSelf succeed');}).catch((error) => {  // 处理业务逻辑错误  console.log('terminateSelf failed, error.code: ' + JSON.stringify(error.code) +    ' error.message: ' + JSON.stringify(error.message));});  UIAbilityContext.terminateSelfWithResultterminateSelfWithResult(parameter: AbilityResult, callback: AsyncCallback<void>): void; 停止当前的Ability。如果该Ability是通过调用startAbilityForResult接口被拉起的，调用terminateSelfWithResult接口时会将结果返回给调用者，如果该Ability不是通过调用startAbilityForResult接口被拉起的，调用terminateSelfWithResult接口时不会有结果返回给调用者（callback形式）。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    parameter  AbilityResult  是  返回给调用startAbilityForResult 接口调用方的相关信息。   callback  AsyncCallback<void>  是  callback形式返回停止结果。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000011  Context does not exist.   16000050  Internal Error.     示例： 已复制let want = {  bundleName: 'com.extreme.myapplication',  abilityName: 'SecondAbility'}let resultCode = 100;// 返回给接口调用方AbilityResult信息let abilityResult = {  want,  resultCode}
try {  this.context.terminateSelfWithResult(abilityResult, (error) => {    if (error.code) {      // 处理业务逻辑错误      console.log('terminateSelfWithResult failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));      return;    }    // 执行正常业务    console.log('terminateSelfWithResult succeed');  });} catch (paramError) {    // 处理入参错误异常    console.log('error.code: ' + JSON.stringify(paramError.code) +      ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.terminateSelfWithResultterminateSelfWithResult(parameter: AbilityResult): Promise<void>; 停止当前的Ability。如果该Ability是通过调用startAbilityForResult接口被拉起的，调用terminateSelfWithResult接口时会将结果返回给调用者，如果该Ability不是通过调用startAbilityForResult接口被拉起的，调用terminateSelfWithResult接口时不会有结果返回给调用者（promise形式）。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    parameter  AbilityResult  是  返回给startAbilityForResult 调用方的信息。     返回值：  类型  说明  Promise<void>  promise形式返回停止结果。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000007  Service busyness. There are concurrent tasks, waiting for retry.   16000011  Context does not exist.   16000050  Internal Error.     示例： 已复制let want = {  bundleName: 'com.extreme.myapplication',  abilityName: 'SecondAbility'}let resultCode = 100;// 返回给接口调用方AbilityResult信息let abilityResult = {  want,  resultCode}
try {  this.context.terminateSelfWithResult(abilityResult)    .then((data) => {      // 执行正常业务      console.log('terminateSelfWithResult succeed');    })    .catch((error) => {      // 处理业务逻辑错误      console.log('terminateSelfWithResult failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));    });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.connectServiceExtensionAbilityconnectServiceExtensionAbility(want: Want, options: ConnectOptions): number; 使用AbilityInfo.AbilityType.SERVICE模板将当前Ability连接到一个Ability。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动Ability的want信息。   options  ConnectOptions  否  远端对象实例。     返回值：  类型  说明  number  返回Ability连接的结果code。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000002  Ability type error. The specified ability type is wrong.   16000004  Visibility verification failed.   16000011  Context does not exist.   16000050  Internal Error.     示例： 已复制let want = {  deviceId: '',  bundleName: 'com.extreme.test',  abilityName: 'MainAbility'};let options = {  onConnect(elementName, remote) { console.log('----------- onConnect -----------') },  onDisconnect(elementName) { console.log('----------- onDisconnect -----------') },  onFailed(code) { console.log('----------- onFailed -----------') }}
let connection = null;try {  connection = this.context.connectServiceExtensionAbility(want, options);} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.disconnectServiceExtensionAbilitydisconnectServiceExtensionAbility(connection: number): Promise<void>; 断开连接（promise形式）。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 系统API: 此接口为系统接口，三方应用不支持调用。 参数： 参数名  类型  必填  说明    connection  number  是  连接的Ability的数字代码。     返回值：  类型  说明  Promise<void>  返回执行结果。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000003  Input error. The specified id does not exist.   16000011  Context does not exist.   16000050  Internal Error.     示例： 已复制// connection为connectServiceExtensionAbility中的返回值let connection = 1;
try {  this.context.disconnectServiceExtensionAbility(connection)    .then((data) => {      // 执行正常业务      console.log('disconnectServiceExtensionAbility succeed');    })    .catch((error) => {      // 处理业务逻辑错误      console.log('disconnectServiceExtensionAbility failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));    });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.disconnectServiceExtensionAbilitydisconnectServiceExtensionAbility(connection: number, callback:AsyncCallback<void>): void; 断开连接（callback形式）。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 系统API: 此接口为系统接口，三方应用不支持调用。 参数： 参数名  类型  必填  说明    connection  number  是  连接的Ability的数字代码。   callback  AsyncCallback<void>  是  表示指定的回调方法。     错误码：  错误码ID  错误信息  201  The application does not have permission to call the interface.   401  Invalid input parameter.   16000001  Input error. The specified ability name does not exist.   16000003  Input error. The specified id does not exist.   16000011  Context does not exist.   16000050  Internal Error.     示例： 已复制// connection为connectServiceExtensionAbility中的返回值let connection = 1;
try {  this.context.disconnectServiceExtensionAbility(connection, (error) => {    if (error.code) {      // 处理业务逻辑错误      console.log('disconnectServiceExtensionAbility failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));      return;    }    // 执行正常业务    console.log('disconnectServiceExtensionAbility succeed');  });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.startAbilityByCallstartAbilityByCall(want: Want): Promise<Caller>; 启动指定Ability至前台或后台，同时获取其Caller通信接口，调用方可使用Caller与被启动的Ability进行通信。 使用规则： 调用方应用位于后台时，使用该接口启动Ability需申请ohos.permission.START_ABILITIES_FROM_BACKGROUND权限目标Ability的visible属性若配置为false，调用方应用需申请ohos.permission.START_INVISIBLE_ABILITY权限组件启动规则详见：组件启动规则（Stage模型） 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  传入需要启动的Ability的信息，包含abilityName、moduleName、bundleName、deviceId(可选)、parameters(可选)，其中deviceId缺省或为空表示启动本地Ability，parameters缺省或为空表示后台启动Ability。     返回值：  类型  说明  Promise<Caller>  获取要通讯的caller对象。     示例： 后台启动： 已复制let caller = undefined;
// 后台启动Ability，不配置parameterslet wantBackground = {    bundleName: 'com.example.myservice',    moduleName: 'entry',    abilityName: 'MainAbility',    deviceId: ''};
try {  this.context.startAbilityByCall(wantBackground)    .then((obj) => {      // 执行正常业务      caller = obj;      console.log('startAbilityByCall succeed');    }).catch((error) => {      // 处理业务逻辑错误      console.log('startAbilityByCall failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));    });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));} 前台启动： 已复制let caller = undefined;
// 前台启动Ability，将parameters中的'ohos.aafwk.param.callAbilityToForeground'配置为truelet wantForeground = {    bundleName: 'com.example.myservice',    moduleName: 'entry',    abilityName: 'MainAbility',    deviceId: '',    parameters: {      'ohos.aafwk.param.callAbilityToForeground': true    }};
try {  this.context.startAbilityByCall(wantForeground)    .then((obj) => {      // 执行正常业务      caller = obj;      console.log('startAbilityByCall succeed');    }).catch((error) => {      // 处理业务逻辑错误      console.log('startAbilityByCall failed, error.code: ' + JSON.stringify(error.code) +        ' error.message: ' + JSON.stringify(error.message));    });} catch (paramError) {  // 处理入参错误异常  console.log('error.code: ' + JSON.stringify(paramError.code) +    ' error.message: ' + JSON.stringify(paramError.message));}  UIAbilityContext.setMissionLabelsetMissionLabel(label: string, callback:AsyncCallback<void>): void; 设置ability在任务中显示的名称（callback形式）。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    label  string  是  显示名称。   callback  AsyncCallback<void>  是  回调函数，返回接口调用是否成功的结果。     示例： 已复制this.context.setMissionLabel('test',(result) => {    console.log('requestPermissionsFromUserresult:' + JSON.stringify(result));});  UIAbilityContext.setMissionLabelsetMissionLabel(label: string): Promise<void>; 设置ability在任务中显示的名称（promise形式）。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    label  string  是  显示名称。     返回值：  类型  说明  Promise<void>  返回一个Promise，包含接口的结果。     示例： 已复制this.context.setMissionLabel('test').then(() => {    console.log('success');}).catch((error) => {    console.log('failed:' + JSON.stringify(error));});  UIAbilityContext.restoreWindowStagerestoreWindowStage(localStorage: LocalStorage) : void; 恢复ability中的window stage数据。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    localStorage  image.LocalStorage  是  用于恢复window stage的存储数据。     示例： 已复制  let storage = new LocalStorage();  this.context.restoreWindowStage(storage);  UIAbilityContext.isTerminatingisTerminating(): boolean; 查询ability是否在terminating状态。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 返回值：  类型  说明  bool  true：ability当前处于terminating状态；false：不处于terminating状态。     示例： 已复制let isTerminating = this.context.isTerminating();console.log(`ability state is ${isTerminating}`);  UIAbilityContext.requestDialogServicerequestDialogService(want: Want, result: AsyncCallback<dialogRequest.RequestResult>): void; 启动一个支持模态弹框的ServiceExtensionAbility。ServiceExtensionAbility被启动后，应用弹出模态弹框，通过调用setRequestResult接口返回结果给调用者。 该接口能力在HarmonyOS 3.1 Beta2暂不支持。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动ServiceExtensionAbility的want信息。   result  AsyncCallback<dialogRequest.RequestResult>  是  执行结果回调函数。      UIAbilityContext.requestDialogServicerequestDialogService(want: Want): Promise<dialogRequest.RequestResult>; 启动一个支持模态弹框的ServiceExtensionAbility。ServiceExtensionAbility被启动后，应用弹出模态弹框，通过调用setRequestResult接口返回结果给调用者（promise形式）。 该接口能力在HarmonyOS 3.1 Beta2暂不支持。 系统能力：SystemCapability.Ability.AbilityRuntime.Core 参数： 参数名  类型  必填  说明    want  Want  是  启动ServiceExtensionAbility的want信息。     返回值：  类型  说明  Promise<dialogRequest.RequestResult>  Promise形式返回执行结果。       上一篇 ProcessInformation 下一篇 ShellCmdResult 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。