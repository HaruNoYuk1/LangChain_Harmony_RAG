您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块常量data_storage.getStorageSyncdata_storage.getStoragedata_storage.getStoragedata_storage.deleteStorageSyncdata_storage.deleteStoragedata_storage.deleteStoragedata_storage.removeStorageFromCacheSyncdata_storage.removeStorageFromCachedata_storage.removeStorageFromCacheStoragegetSyncgetgetputSyncputputhasSynchashasdeleteSyncdeletedeleteflushSyncflushflushclearSyncclearclearon('change')off('change')StorageObserverValueType@ohos.data.storage (轻量级存储) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
 轻量级存储为应用提供key-value键值型的文件数据处理能力，支持应用对数据进行轻量级存储及查询。数据存储形式为键值对，键的类型为字符串型，值的存储数据类型包括数字型、字符型、布尔型。 
说明
本模块首批接口从API version 6开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。 从API Version 9开始，该接口不再维护，推荐使用新接口@ohos.data.preferences。  
 导入模块已复制import data_storage from '@ohos.data.storage';  常量系统能力： 以下各项对应的系统能力均为SystemCapability.DistributedDataManager.Preferences.Core 名称  类型  可读  可写  说明    MAX_KEY_LENGTH  number  是  否  key的最大长度限制为80字节。   MAX_VALUE_LENGTH  number  是  否  value的最大长度限制为8192字节。      data_storage.getStorageSyncgetStorageSync(path: string): Storage 读取指定文件，将数据加载到Storage实例，用于数据操作。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。     返回值：  类型  说明  Storage  获取到要操作的Storage实例，用于进行数据存储操作。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {  path = filePath;  console.info("======================>getFilesDirPromise====================>");
  let storage = data_storage.getStorageSync(path + '/mystore');  storage.putSync('startup', 'auto');  storage.flushSync();});  data_storage.getStoragegetStorage(path: string, callback: AsyncCallback<Storage>): void 读取指定文件，将数据加载到Storage实例，用于数据操作，使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。   callback  AsyncCallback<Storage>  是  回调函数。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {  path = filePath;  console.info("======================>getFilesDirPromise====================>");
  data_storage.getStorage(path + '/mystore', function (err, storage) {    if (err) {      console.info("Failed to get the storage. path: " + path + '/mystore');      return;    }    storage.putSync('startup', 'auto');    storage.flushSync();  })});  data_storage.getStoragegetStorage(path: string): Promise<Storage> 读取指定文件，将数据加载到Storage实例，用于数据操作，使用Promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。     返回值：  类型  说明  Promise<Storage>  Promise实例，用于异步获取结果。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {  path = filePath;  console.info("======================>getFilesDirPromise====================>");
  let getPromise = data_storage.getStorage(path + '/mystore');  getPromise.then((storage) => {    storage.putSync('startup', 'auto');    storage.flushSync();  }).catch((err) => {    console.info("Failed to get the storage. path: " + path + '/mystore');  })});  data_storage.deleteStorageSyncdeleteStorageSync(path: string): void 从内存中移除指定文件对应的Storage单实例，并删除指定文件及其备份文件、损坏文件。删除指定文件时，应用不允许再使用该实例进行数据操作，否则会出现数据一致性问题。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {    path = filePath;    console.info("======================>getFilesDirPromise====================>");
    data_storage.deleteStorageSync(path + '/mystore');});  data_storage.deleteStoragedeleteStorage(path: string, callback: AsyncCallback<void>): void 从内存中移除指定文件对应的Storage单实例，并删除指定文件及其备份文件、损坏文件。删除指定文件时，应用不允许再使用该实例进行数据操作，否则会出现数据一致性问题，使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。   callback  AsyncCallback<void>  是  回调函数。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {  path = filePath;  console.info("======================>getFilesDirPromise====================>");
  data_storage.deleteStorage(path + '/mystore', function (err) {    if (err) {      console.info("Failed to delete the storage with err: " + err);      return;    }    console.info("Succeeded in deleting the storage.");  })});  data_storage.deleteStoragedeleteStorage(path: string): Promise<void> 从内存中移除指定文件对应的Storage单实例，并删除指定文件及其备份文件、损坏文件。删除指定文件时，应用不允许再使用该实例进行数据操作，否则会出现数据一致性问题，使用promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。     返回值：  类型  说明  Promise<void>  Promise实例，用于异步获取结果。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {  path = filePath;  console.info("======================>getFilesDirPromise====================>");
  let promisedelSt = data_storage.deleteStorage(path + '/mystore');  promisedelSt.then(() => {    console.info("Succeeded in deleting the storage.");  }).catch((err) => {    console.info("Failed to delete the storage with err: " + err);  })});  data_storage.removeStorageFromCacheSyncremoveStorageFromCacheSync(path: string): void 从内存中移除指定文件对应的Storage单实例。移除Storage单实例时，应用不允许再使用该实例进行数据操作，否则会出现数据一致性问题。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {    path = filePath;    console.info("======================>getFilesDirPromise====================>");
    data_storage.removeStorageFromCacheSync(path + '/mystore');});  data_storage.removeStorageFromCacheremoveStorageFromCache(path: string, callback: AsyncCallback<void>): void 从内存中移除指定文件对应的Storage单实例。移除Storage单实例时，应用不允许再使用该实例进行数据操作，否则会出现数据一致性问题。使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。   callback  AsyncCallback<void>  是  回调函数。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {  path = filePath;  console.info("======================>getFilesDirPromise====================>");
  data_storage.removeStorageFromCache(path + '/mystore', function (err) {    if (err) {      console.info("Failed to remove storage from cache with err: " + err);      return;    }    console.info("Succeeded in removing storage from cache.");  })});  data_storage.removeStorageFromCacheremoveStorageFromCache(path: string): Promise<void> 从内存中移除指定文件对应的Storage单实例。移除Storage单实例时，应用不允许再使用该实例进行数据操作，否则会出现数据一致性问题。使用Promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    path  string  是  应用程序内部数据存储路径。     返回值：  类型  说明  Promise<void>  Promise实例，用于异步获取结果。     示例： 已复制import featureAbility from '@ohos.ability.featureAbility';
let path;let context = featureAbility.getContext();context.getFilesDir().then((filePath) => {  path = filePath;  console.info("======================>getFilesDirPromise====================>");
  let promiserevSt = data_storage.removeStorageFromCache(path + '/mystore')  promiserevSt.then(() => {    console.info("Succeeded in removing storage from cache.");  }).catch((err) => {    console.info("Failed to remove storage from cache with err: " + err);  })});  Storage提供获取和修改存储数据的接口。 下列接口都需先使用data_storage.getStorage或data_storage.getStorageSync获取到Storage实例，再通过此实例调用对应接口。  getSyncgetSync(key: string, defValue: ValueType): ValueType 获取键对应的值，如果值为null或者非默认值类型，返回默认数据defValue。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称，不能为空。   defValue  ValueType  是  给定key的存储不存在，则要返回的默认值。支持number、string、boolean。     返回值：  类型  说明  ValueType  键对应的值，如果值为null或者非默认值类型，返回默认数据。     示例： 已复制let value = storage.getSync('startup', 'default');console.info("The value of startup is " + value);  getget(key: string, defValue: ValueType, callback: AsyncCallback<ValueType>): void 获取键对应的值，如果值为null或者非默认值类型，返回默认数据defValue。使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称，不能为空。   defValue  ValueType  是  默认返回值。支持number、string、boolean。   callback  AsyncCallback<ValueType>  是  回调函数。     示例： 已复制storage.get('startup', 'default', function(err, value) {    if (err) {        console.info("Failed to get the value of startup with err: " + err);        return;      }    console.info("The value of startup is " + value);})  getget(key: string, defValue: ValueType): Promise<ValueType> 获取键对应的值，如果值为null或者非默认值类型，返回默认数据defValue。使用Promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称，不能为空。   defValue  ValueType  是  默认返回值。支持number、string、boolean。     返回值：  类型  说明  Promise<ValueType>  Promise实例，用于异步获取结果。     示例： 已复制let promiseget = storage.get('startup', 'default');promiseget.then((value) => {    console.info("The value of startup is " + value)}).catch((err) => {    console.info("Failed to get the value of startup with err: " + err);})  putSyncputSync(key: string, value: ValueType): void 首先获取指定文件对应的Storage实例，然后借助Storage API将数据写入Storage实例，通过flush或者flushSync将Storage实例持久化。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要修改的存储的key，不能为空。   value  ValueType  是  存储的新值。支持number、string、boolean。     示例： 已复制storage.putSync('startup', 'auto');  putput(key: string, value: ValueType, callback: AsyncCallback<void>): void 首先获取指定文件对应的Storage实例，然后借助Storage API将数据写入Storage实例，通过flush或者flushSync将Storage实例持久化。使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要修改的存储的key，不能为空。   value  ValueType  是  存储的新值。支持number、string、boolean。   callback  AsyncCallback<void>  是  回调函数。     示例： 已复制storage.put('startup', 'auto', function (err) {    if (err) {        console.info("Failed to put the value of startup with err: " + err);        return;    }    console.info("Succeeded in putting the value of startup.");})  putput(key: string, value: ValueType): Promise<void> 首先获取指定文件对应的Storage实例，然后借助Storage API将数据写入Storage实例，通过flush或者flushSync将Storage实例持久化。使用Promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要修改的存储的key，不能为空。   value  ValueType  是  存储的新值。支持number、string、boolean。     返回值：  类型  说明  Promise<void>  Promise实例，用于异步处理。     示例： 已复制let promiseput = storage.put('startup', 'auto');promiseput.then(() => {    console.info("Succeeded in putting the value of startup.");}).catch((err) => {    console.info("Failed to put the value of startup with err: " + err);})  hasSynchasSync(key: string): boolean 检查存储对象是否包含名为给定key的存储。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称，不能为空。     返回值：  类型  说明  boolean  true 表示存在，false表示不存在。     示例： 已复制let isExist = storage.hasSync('startup');if (isExist) {    console.info("The key of startup is contained.");}  hashas(key: string, callback: AsyncCallback<boolean>): boolean 检查存储对象是否包含名为给定key的存储。使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称，不能为空。   callback  AsyncCallback<boolean>  是  回调函数。     返回值：  类型  说明  boolean  true表示存在，false表示不存在。     示例： 已复制storage.has('startup', function (err, isExist) {    if (err) {        console.info("Failed to check the key of startup with err: " + err);        return;    }    if (isExist) {        console.info("The key of startup is contained.");    }})  hashas(key: string): Promise<boolean> 检查存储对象是否包含名为给定key的存储。使用Promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称，不能为空。     返回值：  类型  说明  Promise<boolean>  Promise实例，用于异步处理。     示例： 已复制let promisehas = storage.has('startup')promisehas.then((isExist) => {    if (isExist) {        console.info("The key of startup is contained.");    }}).catch((err) => {    console.info("Failed to check the key of startup with err: " + err);})  deleteSyncdeleteSync(key: string): void 从存储对象中删除名为给定key的存储。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称。它不能为空。     示例： 已复制 storage.deleteSync('startup');  deletedelete(key: string, callback: AsyncCallback<void>): void 从存储对象中删除名为给定key的存储。使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称，不能为空。   callback  AsyncCallback<void>  是  回调函数。     示例： 已复制storage.delete('startup', function (err) {    if (err) {        console.info("Failed to delete startup key failed err: " + err);        return;    }    console.info("Succeeded in deleting startup key.");})  deletedelete(key: string): Promise<void> 从存储对象删除名为给定key的存储。使用Promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储key名称。     返回值：  类型  说明  Promise<void>  Promise实例，用于异步处理。     示例： 已复制let promisedel = storage.delete('startup')promisedel.then(() => {    console.info("Succeeded in deleting startup key.");}).catch((err) => {    console.info("Failed to delete startup key failed err: " + err);})  flushSyncflushSync(): void 将当前storage对象中的修改保存到当前的storage，并同步存储到文件中。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 示例： 已复制storage.flushSync();  flushflush(callback: AsyncCallback<void>): void 将当前storage对象中的修改保存到当前的storage，并异步存储到文件中。使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  回调函数。     示例： 已复制storage.flush(function (err) {    if (err) {        console.info("Failed to flush to file with err: " + err);        return;    }    console.info("Succeeded in flushing to file.");})  flushflush(): Promise<void> 将当前storage对象中的修改保存到当前的storage，并异步存储到文件中。使用Promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 返回值：  类型  说明  Promise<void>  Promise实例，用于异步处理。     示例： 已复制let promiseflush = storage.flush();promiseflush.then(() => {    console.info("Succeeded in flushing to file.");}).catch((err) => {    console.info("Failed to flush to file with err: " + err);})  clearSyncclearSync(): void 清除此存储对象中的所有存储。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 示例： 已复制storage.clearSync();  clearclear(callback: AsyncCallback<void>): void 清除此存储对象中的所有存储。使用callback方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  回调函数。     示例： 已复制storage.clear(function (err) {    if (err) {        console.info("Failed to clear the storage with err: " + err);        return;    }    console.info("Succeeded in clearing the storage.");})  clearclear(): Promise<void> 清除此存储对象中的所有存储。使用Promise方式返回结果，此方法为异步方法。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 返回值：  类型  说明  Promise<void>  Promise实例，用于异步处理。     示例： 已复制let promiseclear = storage.clear();promiseclear.then(() => {    console.info("Succeeded in clearing the storage.");}).catch((err) => {    console.info("Failed to clear the storage with err: " + err);})  on('change')on(type: 'change', callback: Callback<StorageObserver>): void 订阅数据变更者类需要实现StorageObserver接口，订阅的key的值发生变更后，在执行flush/flushSync方法后，callback方法会被回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    type  string  是  事件类型，固定值'change'，表示数据变更。   callback  Callback<StorageObserver>  是  回调对象实例。     示例： 已复制let observer = function (key) {    console.info("The key of " + key + " changed.");}storage.on('change', observer);storage.putSync('startup', 'auto');storage.flushSync();  // observer will be called.  off('change')off(type: 'change', callback: Callback<StorageObserver>): void 当不再进行订阅数据变更时，使用此接口取消订阅。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    type  string  是  事件类型，固定值'change'，表示数据变更。   callback  Callback<StorageObserver>  是  需要取消的回调对象实例。     示例： 已复制let observer = function (key) {    console.info("The key of " + key + " changed.");}storage.off('change', observer);  StorageObserver系统能力： SystemCapability.DistributedDataManager.Preferences.Core 名称  类型  必填  说明    key  string  否  变更的数据内容。      ValueType用于表示允许的数据字段类型。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core  类型  说明  number  表示值类型为数字。   string  表示值类型为字符。   boolean  表示值类型为布尔值。       上一篇 @ohos.data.distributedData (分布式数据管理) 下一篇 @ohos.data.rdb (关系型数据库) 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。