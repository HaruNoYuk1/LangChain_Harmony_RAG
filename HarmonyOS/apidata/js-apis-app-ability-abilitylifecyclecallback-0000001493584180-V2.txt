您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块AbilityLifecycleCallback.onAbilityCreateAbilityLifecycleCallback.onWindowStageCreateAbilityLifecycleCallback.onWindowStageActiveAbilityLifecycleCallback.onWindowStageInactiveAbilityLifecycleCallback.onWindowStageDestroyAbilityLifecycleCallback.onAbilityDestroyAbilityLifecycleCallback.onAbilityForegroundAbilityLifecycleCallback.onAbilityBackgroundAbilityLifecycleCallback.onAbilityContinueAbilityLifecycleCallback使用@ohos.app.ability.abilityLifecycleCallback (AbilityLifecycleCallback) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
 AbilityLifecycleCallback模块提供应用上下文ApplicationContext的生命周期发生变化时触发相应回调的能力，包括onAbilityCreate、onWindowStageCreate、onWindowStageActive、onWindowStageInactive、onWindowStageDestroy、onAbilityDestroy、onAbilityForeground、onAbilityBackground、onAbilityContinue方法。 
说明
 本模块首批接口从API version 9 开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。 本模块接口仅可在Stage模型下使用。 
 导入模块已复制import AbilityLifecycleCallback from '@ohos.app.ability.AbilityLifecycleCallback';  AbilityLifecycleCallback.onAbilityCreateonAbilityCreate(ability: UIAbility): void; 注册监听应用上下文的生命周期后，在ability创建时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象    示例： 已复制let abilityLifecycleCallback =  {    onAbilityCreate(ability){        console.log('AbilityLifecycleCallback onAbilityCreate.');      }};  AbilityLifecycleCallback.onWindowStageCreateonWindowStageCreate(ability: UIAbility, windowStage: window.WindowStage): void; 注册监听应用上下文的生命周期后，在windowStage创建时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象  windowStage window.WindowStage 是 当前WindowStage对象    示例： 已复制let abilityLifecycleCallback =  {    onWindowStageCreate(ability, windowStage){        console.log('AbilityLifecycleCallback onWindowStageCreate.');    }};  AbilityLifecycleCallback.onWindowStageActiveonWindowStageActive(ability: UIAbility, windowStage: window.WindowStage): void; 注册监听应用上下文的生命周期后，在windowStage获焦时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象  windowStage window.WindowStage 是 当前WindowStage对象    示例： 已复制let abilityLifecycleCallback =  {    onWindowStageActive(ability, windowStage){        console.log('AbilityLifecycleCallback onWindowStageActive.');    }};  AbilityLifecycleCallback.onWindowStageInactiveonWindowStageInactive(ability: UIAbility, windowStage: window.WindowStage): void; 注册监听应用上下文的生命周期后，在windowStage失焦时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象  windowStage window.WindowStage 是 当前WindowStage对象    示例： 已复制let abilityLifecycleCallback =  {    onWindowStageInactive(ability, windowStage){        console.log('AbilityLifecycleCallback onWindowStageInactive.');    }};  AbilityLifecycleCallback.onWindowStageDestroyonWindowStageDestroy(ability: UIAbility, windowStage: window.WindowStage): void; 注册监听应用上下文的生命周期后，在windowStage销毁时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象  windowStage window.WindowStage 是 当前WindowStage对象    示例： 已复制let abilityLifecycleCallback =  {    onWindowStageDestroy(ability, windowStage){        console.log('AbilityLifecycleCallback onWindowStageDestroy.');    }};  AbilityLifecycleCallback.onAbilityDestroyonAbilityDestroy(ability: UIAbility): void; 注册监听应用上下文的生命周期后，在ability销毁时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象    示例： 已复制let abilityLifecycleCallback =  {    onAbilityDestroy(ability){        console.log('AbilityLifecycleCallback onAbilityDestroy.');    }};  AbilityLifecycleCallback.onAbilityForegroundonAbilityForeground(ability: UIAbility): void; 注册监听应用上下文的生命周期后，在ability的状态从后台转到前台时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象    示例： 已复制let abilityLifecycleCallback =  {    onAbilityForeground(ability){        console.log('AbilityLifecycleCallback onAbilityForeground.');    }};  AbilityLifecycleCallback.onAbilityBackgroundonAbilityBackground(ability: UIAbility): void; 注册监听应用上下文的生命周期后，在ability的状态从前台转到后台时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象    示例： 已复制let abilityLifecycleCallback =  {    onAbilityBackground(ability){        console.log('AbilityLifecycleCallback onAbilityBackground.');    }};  AbilityLifecycleCallback.onAbilityContinueonAbilityContinue(ability: UIAbility): void; 注册监听应用上下文的生命周期后，在ability迁移时触发回调。 系统能力：SystemCapability.Ability.AbilityRuntime.AbilityCore 参数： 参数名 类型 必填 说明   ability UIAbility 是 当前Ability对象    示例： 已复制let abilityLifecycleCallback =  {    onAbilityContinue(ability){        console.log('AbilityLifecycleCallback onAbilityContinue.');    }};  AbilityLifecycleCallback使用示例： MyFirstAbility.ts 已复制import AbilityLifecycleCallback from '@ohos.app.ability.AbilityLifecycleCallback';import AbilityStage from '@ohos.app.ability.AbilityStage';import UIAbility from '@ohos.app.ability.UIAbility';
// 声明ability生命周期回调，需配置所有回调后才可以在applicationContext注册let abilityLifecycleCallback = {    onAbilityCreate(ability){        console.log('AbilityLifecycleCallback onAbilityCreate.');      },    onWindowStageCreate(ability, windowStage){        console.log('AbilityLifecycleCallback onWindowStageCreate.');    },    onWindowStageActive(ability, windowStage){        console.log('AbilityLifecycleCallback onWindowStageActive.');    },    onWindowStageInactive(ability, windowStage){        console.log('AbilityLifecycleCallback onWindowStageInactive.');    },    onWindowStageDestroy(ability, windowStage){        console.log('AbilityLifecycleCallback onWindowStageDestroy.');    },    onAbilityDestroy(ability){        console.log('AbilityLifecycleCallback onAbilityDestroy.');    },    onAbilityForeground(ability){        console.log('AbilityLifecycleCallback onAbilityForeground.');    },    onAbilityBackground(ability){        console.log('AbilityLifecycleCallback onAbilityBackground.');    },    onAbilityContinue(ability){        console.log('AbilityLifecycleCallback onAbilityContinue.');    }};
export default class MyFirstAbility extends UIAbility {    onCreate() {        console.log('MyAbilityStage onCreate');        // 1.通过context属性获取applicationContext        let applicationContext = this.context.getApplicationContext();        // 2.通过applicationContext注册监听应用内生命周期        try {            globalThis.lifecycleId = applicationContext.on('abilityLifecycle', abilityLifecycleCallback);            console.log('registerAbilityLifecycleCallback lifecycleId: ${globalThis.lifecycleId}');        } catch (paramError) {            console.log('error: ' + paramError.code + ' ,' + paramError.message);        }    }} MySecondAbility.ts 已复制import UIAbility from '@ohos.app.ability.UIAbility';
export default class MySecondAbility extends UIAbility {    onDestroy() {        let applicationContext = this.context.getApplicationContext();        // 3.通过applicationContext注销监听应用内生命周期        applicationContext.off('abilityLifecycle', globalThis.lifecycleId, (error) => {            if (error.code != 0) {                console.log('unregisterAbilityLifecycleCallback failed, error: ' + JSON.stringify(error));            } else {                console.log('unregisterAbilityLifecycleCallback success.');            }        });    }}   上一篇 @ohos.app.ability.AbilityConstant (AbilityConstant) 下一篇 @ohos.app.ability.AbilityStage (AbilityStage) 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。