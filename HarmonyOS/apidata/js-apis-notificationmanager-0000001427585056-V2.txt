您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块Notification.publishNotification.publishNotification.cancelNotification.cancelNotification.cancelNotification.cancelAllNotification.cancelAllNotification.addSlotNotification.addSlotNotification.getSlotNotification.getSlotNotification.getSlotsNotification.getSlotsNotification.removeSlotNotification.removeSlotNotification.removeAllSlotsNotification.removeAllSlotsNotification.getActiveNotificationCountNotification.getActiveNotificationCountNotification.getActiveNotificationsNotification.getActiveNotificationsNotification.cancelGroupNotification.cancelGroupNotification.isSupportTemplateNotification.isSupportTemplateNotification.requestEnableNotificationNotification.requestEnableNotificationNotification.isDistributedEnabledNotification.isDistributedEnabledContentTypeSlotType@ohos.notificationManager (NotificationManager模块) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
 本模块提供通知管理的能力，包括发布、取消发布通知，创建、获取、移除通知通道，获取通知的使能状态、角标使能状态，获取通知的相关信息等。 
说明
本模块首批接口从API version 9开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。 
 导入模块已复制import Notification from '@ohos.notificationManager';  Notification.publishpublish(request: NotificationRequest, callback: AsyncCallback<void>): void 发布通知（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    request  NotificationRequest  是  用于设置要发布通知的内容和相关配置信息。   callback  AsyncCallback<void>  是  发布通知的回调方法。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600004  Notification is not enabled.   1600005  Notification slot is not enabled.   1600009  Over max number notifications per second.     示例： 已复制//publish回调function publishCallback(err) {    if (err) {        console.info("publish failed " + JSON.stringify(err));    } else {        console.info("publish success");    }}//通知Request对象let notificationRequest = {    id: 1,    content: {        contentType: Notification.ContentType.NOTIFICATION_CONTENT_BASIC_TEXT,        normal: {            title: "test_title",            text: "test_text",            additionalText: "test_additionalText"        }    }};Notification.publish(notificationRequest, publishCallback);  Notification.publishpublish(request: NotificationRequest): Promise<void> 发布通知（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    request  NotificationRequest  是  用于设置要发布通知的内容和相关配置信息。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600004  Notification is not enabled.   1600005  Notification slot is not enabled.   1600009  Over max number notifications per second.     示例： 已复制// 通知Request对象let notificationRequest = {    notificationId: 1,    content: {        contentType: Notification.ContentType.NOTIFICATION_CONTENT_BASIC_TEXT,        normal: {            title: "test_title",            text: "test_text",            additionalText: "test_additionalText"        }    }};Notification.publish(notificationRequest).then(() => {    console.info("publish success");});  Notification.cancelcancel(id: number, label: string, callback: AsyncCallback<void>): void 通过通知ID和通知标签取消已发布的通知（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    id  number  是  通知ID。   label  string  是  通知标签。   callback  AsyncCallback<void>  是  表示被指定的回调方法。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600007  The notification is not exist.     示例： 已复制// cancel回调function cancelCallback(err) {    if (err) {        console.info("cancel failed " + JSON.stringify(err));    } else {        console.info("cancel success");    }}Notification.cancel(0, "label", cancelCallback);  Notification.cancelcancel(id: number, label?: string): Promise<void> 取消与指定通知ID相匹配的已发布通知，label可以指定也可以不指定（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    id  number  是  通知ID。   label  string  否  通知标签。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600007  The notification is not exist.     示例： 已复制Notification.cancel(0).then(() => {    console.info("cancel success");});  Notification.cancelcancel(id: number, callback: AsyncCallback<void>): void 取消与指定通知ID相匹配的已发布通知（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    id  number  是  通知ID。   callback  AsyncCallback<void>  是  表示被指定的回调方法。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600007  The notification is not exist.     示例： 已复制// cancel回调function cancelCallback(err) {    if (err) {        console.info("cancel failed " + JSON.stringify(err));    } else {        console.info("cancel success");    }}Notification.cancel(0, cancelCallback);  Notification.cancelAllcancelAll(callback: AsyncCallback<void>): void 取消所有已发布的通知（callback形式）。 系统能力：SystemCapability.Notification.Notification 错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  表示被指定的回调方法。     示例： 已复制// cancel回调function cancelAllCallback(err) {    if (err) {        console.info("cancelAll failed " + JSON.stringify(err));    } else {        console.info("cancelAll success");    }}Notification.cancelAll(cancelAllCallback);  Notification.cancelAllcancelAll(): Promise<void> 取消所有已发布的通知（Promise形式）。 系统能力：SystemCapability.Notification.Notification 错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制Notification.cancelAll().then(() => {    console.info("cancelAll success");});  Notification.addSlotaddSlot(type: SlotType, callback: AsyncCallback<void>): void 创建指定类型的通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    type  SlotType  是  要创建的通知通道的类型。   callback  AsyncCallback<void>  是  表示被指定的回调方法。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制// addslot回调function addSlotCallBack(err) {    if (err) {        console.info("addSlot failed " + JSON.stringify(err));    } else {        console.info("addSlot success");    }}Notification.addSlot(Notification.SlotType.SOCIAL_COMMUNICATION, addSlotCallBack);  Notification.addSlotaddSlot(type: SlotType): Promise<void> 创建指定类型的通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    type  SlotType  是  要创建的通知通道的类型。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制Notification.addSlot(Notification.SlotType.SOCIAL_COMMUNICATION).then(() => {    console.info("addSlot success");});  Notification.getSlotgetSlot(slotType: SlotType, callback: AsyncCallback<NotificationSlot>): void 获取一个指定类型的通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    slotType  SlotType  是  通知渠道类型，目前分为社交通信、服务提醒、内容咨询和其他类型。   callback  AsyncCallback<NotificationSlot>  是  表示被指定的回调方法。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制// getSlot回调function getSlotCallback(err,data) {    if (err) {        console.info("getSlot failed " + JSON.stringify(err));    } else {        console.info("getSlot success");    }}let slotType = Notification.SlotType.SOCIAL_COMMUNICATION;Notification.getSlot(slotType, getSlotCallback);  Notification.getSlotgetSlot(slotType: SlotType): Promise<NotificationSlot> 获取一个指定类型的通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    slotType  SlotType  是  通知渠道类型，目前分为社交通信、服务提醒、内容咨询和其他类型。     返回值：  类型  说明  Promise<NotificationSlot>  以Promise形式返回获取一个通知通道。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制let slotType = Notification.SlotType.SOCIAL_COMMUNICATION;Notification.getSlot(slotType).then((data) => {    console.info("getSlot success, data: " + JSON.stringify(data));});  Notification.getSlotsgetSlots(callback: AsyncCallback<Array<NotificationSlot>>): void 获取此应用程序的所有通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<Array<NotificationSlot>>  是  以callback形式返回获取此应用程序的所有通知通道的结果。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制// getSlots回调function getSlotsCallback(err,data) {    if (err) {        console.info("getSlots failed " + JSON.stringify(err));    } else {        console.info("getSlots success");    }}Notification.getSlots(getSlotsCallback);  Notification.getSlotsgetSlots(): Promise<Array<NotificationSlot>> 获取此应用程序的所有通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 返回值：  类型  说明  Promise<Array<NotificationSlot>>  以Promise形式返回获取此应用程序的所有通知通道的结果。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制Notification.getSlots().then((data) => {    console.info("getSlots success, data: " + JSON.stringify(data));});  Notification.removeSlotremoveSlot(slotType: SlotType, callback: AsyncCallback<void>): void 删除指定类型的通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    slotType  SlotType  是  通知渠道类型,目前分为社交通信、服务提醒、内容咨询和其他类型。   callback  AsyncCallback<void>  是  表示被指定的回调方法。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制// removeSlot回调function removeSlotCallback(err) {    if (err) {        console.info("removeSlot failed " + JSON.stringify(err));    } else {        console.info("removeSlot success");    }}let slotType = Notification.SlotType.SOCIAL_COMMUNICATION;Notification.removeSlot(slotType,removeSlotCallback);  Notification.removeSlotremoveSlot(slotType: SlotType): Promise<void> 删除指定类型的通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    slotType  SlotType  是  通知渠道类型,目前分为社交通信、服务提醒、内容咨询和其他类型。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制let slotType = Notification.SlotType.SOCIAL_COMMUNICATION;Notification.removeSlot(slotType).then(() => {    console.info("removeSlot success");});  Notification.removeAllSlotsremoveAllSlots(callback: AsyncCallback<void>): void 删除所有通知通道（callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  表示被指定的回调方法。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制function removeAllCallBack(err) {    if (err) {        console.info("removeAllSlots failed " + JSON.stringify(err));    } else {        console.info("removeAllSlots success");    }}Notification.removeAllSlots(removeAllCallBack);  Notification.removeAllSlotsremoveAllSlots(): Promise<void> 删除所有通知通道（Promise形式）。 系统能力：SystemCapability.Notification.Notification 错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制Notification.removeAllSlots().then(() => {    console.info("removeAllSlots success");});  Notification.getActiveNotificationCountgetActiveNotificationCount(callback: AsyncCallback<number>): void 获取当前应用未删除的通知数（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<number>  是  获取未删除通知数回调函数。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制function getActiveNotificationCountCallback(err, data) {    if (err) {        console.info("getActiveNotificationCount failed " + JSON.stringify(err));    } else {        console.info("getActiveNotificationCount success");    }}
Notification.getActiveNotificationCount(getActiveNotificationCountCallback);  Notification.getActiveNotificationCountgetActiveNotificationCount(): Promise<number> 获取当前应用未删除的通知数（Promise形式）。 系统能力：SystemCapability.Notification.Notification 返回值：  类型  说明  Promise<number>  以Promise形式返回获取当前应用未删除通知数。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制Notification.getActiveNotificationCount().then((data) => {    console.info("getActiveNotificationCount success, data: " + JSON.stringify(data));});  Notification.getActiveNotificationsgetActiveNotifications(callback: AsyncCallback<Array<NotificationRequest>>): void 获取当前应用未删除的通知列表（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<Array<NotificationRequest>>  是  获取当前应用通知列表回调函数。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制function getActiveNotificationsCallback(err, data) {    if (err) {        console.info("getActiveNotifications failed " + JSON.stringify(err));    } else {        console.info("getActiveNotifications success");    }}
Notification.getActiveNotifications(getActiveNotificationsCallback);  Notification.getActiveNotificationsgetActiveNotifications(): Promise<Array<NotificationRequest>> 获取当前应用未删除的通知列表（Promise形式）。 系统能力：SystemCapability.Notification.Notification 返回值：  类型  说明  Promise<Array<NotificationRequest>>  以Promise形式返回获取当前应用通知列表。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制Notification.getActiveNotifications().then((data) => {    console.info("removeGroupByBundle success, data: " + JSON.stringify(data));});  Notification.cancelGroupcancelGroup(groupName: string, callback: AsyncCallback<void>): void 取消本应用指定组下的通知（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    groupName  string  是  通知组名称，此名称需要在发布通知时通过NotificationRequest对象指定。   callback  AsyncCallback<void>  是  取消本应用指定组下通知的回调函数。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制function cancelGroupCallback(err) {    if (err) {        console.info("cancelGroup failed " + JSON.stringify(err));    } else {        console.info("cancelGroup success");    }}
let groupName = "GroupName";
Notification.cancelGroup(groupName, cancelGroupCallback);  Notification.cancelGroupcancelGroup(groupName: string): Promise<void> 取消本应用指定组下的通知（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    groupName  string  是  通知组名称。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制let groupName = "GroupName";Notification.cancelGroup(groupName).then(() => {    console.info("cancelGroup success");});  Notification.isSupportTemplateisSupportTemplate(templateName: string, callback: AsyncCallback<boolean>): void 查询模板是否存在（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    templateName  string  是  模板名称。   callback  AsyncCallback<boolean>  是  查询模板是否存在的回调函数。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600011  Read template config failed.     示例： 已复制let templateName = 'process';function isSupportTemplateCallback(err, data) {    if (err) {        console.info("isSupportTemplate failed " + JSON.stringify(err));    } else {        console.info("isSupportTemplate success");    }}
Notification.isSupportTemplate(templateName, isSupportTemplateCallback);  Notification.isSupportTemplateisSupportTemplate(templateName: string): Promise<boolean> 查询模板是否存在（Promise形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    templateName  string  是  模板名称。     返回值：  类型  说明  Promise<boolean>  Promise方式返回模板是否存在的结果。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600011  Read template config failed.     示例： 已复制let templateName = 'process';
Notification.isSupportTemplate(templateName).then((data) => {    console.info("isSupportTemplate success, data: " + JSON.stringify(data));});  Notification.requestEnableNotificationrequestEnableNotification(callback: AsyncCallback<void>): void 应用请求通知使能（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  应用请求通知使能的回调函数。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制function requestEnableNotificationCallback(err) {    if (err) {        console.info("requestEnableNotification failed " + JSON.stringify(err));    } else {        console.info("requestEnableNotification success");    }};
Notification.requestEnableNotification(requestEnableNotificationCallback);  Notification.requestEnableNotificationrequestEnableNotification(): Promise<void> 应用请求通知使能（Promise形式）。 系统能力：SystemCapability.Notification.Notification 错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.     示例： 已复制Notification.requestEnableNotification().then(() => {    console.info("requestEnableNotification success");});  Notification.isDistributedEnabledisDistributedEnabled(callback: AsyncCallback<boolean>): void 查询设备是否支持分布式通知（Callback形式）。 系统能力：SystemCapability.Notification.Notification 参数： 参数名  类型  必填  说明    callback  AsyncCallback<boolean>  是  设备是否支持分布式通知的回调函数。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600010  Distributed operation failed.     示例： 已复制function isDistributedEnabledCallback(err, data) {    if (err) {        console.info("isDistributedEnabled failed " + JSON.stringify(err));    } else {        console.info("isDistributedEnabled success " + JSON.stringify(data));    }};
Notification.isDistributedEnabled(isDistributedEnabledCallback);  Notification.isDistributedEnabledisDistributedEnabled(): Promise<boolean> 查询设备是否支持分布式通知（Promise形式）。 系统能力：SystemCapability.Notification.Notification 返回值：  类型  说明  Promise<boolean>  Promise方式返回设备是否支持分布式通知的结果。     错误码： 错误码详细介绍请参考errcode-notification。  错误码ID  错误信息  1600001  Internal error.   1600002  Marshalling or unmarshalling error.   1600003  Failed to connect service.   1600010  Distributed operation failed.     示例： 已复制Notification.isDistributedEnabled()    .then((data) => {        console.info("isDistributedEnabled success, data: " + JSON.stringify(data));    });  ContentType系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  值  说明    NOTIFICATION_CONTENT_BASIC_TEXT  NOTIFICATION_CONTENT_BASIC_TEXT  普通类型通知。   NOTIFICATION_CONTENT_LONG_TEXT  NOTIFICATION_CONTENT_LONG_TEXT  长文本类型通知。   NOTIFICATION_CONTENT_PICTURE  NOTIFICATION_CONTENT_PICTURE  图片类型通知。   NOTIFICATION_CONTENT_CONVERSATION  NOTIFICATION_CONTENT_CONVERSATION  社交类型通知。   NOTIFICATION_CONTENT_MULTILINE  NOTIFICATION_CONTENT_MULTILINE  多行文本类型通知。      SlotType系统能力：以下各项对应的系统能力均为SystemCapability.Notification.Notification 名称  值  说明    UNKNOWN_TYPE  0  未知类型。   SOCIAL_COMMUNICATION  1  社交类型。   SERVICE_INFORMATION  2  服务类型。   CONTENT_INFORMATION  3  内容类型。   OTHER_TYPES  0xFFFF  其他类型。       上一篇 @ohos.events.emitter (Emitter) 下一篇 @ohos.commonEvent (公共事件模块) 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。