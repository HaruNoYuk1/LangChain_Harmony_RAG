您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块systemDateTime.getCurrentTimesystemDateTime.getCurrentTimesystemDateTime.getCurrentTimesystemDateTime.getRealActiveTimesystemDateTime.getRealActiveTimesystemDateTime.getRealActiveTimesystemDateTime.getRealTimesystemDateTime.getRealTimesystemDateTime.getRealTimesystemDateTime.getDatesystemDateTime.getDatesystemDateTime.getTimezonesystemDateTime.getTimezone支持的系统时区@ohos.systemDateTime (系统时间、时区) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
 本模块主要由系统时间和系统时区功能组成。开发者可以设置、获取系统时间及系统时区。 
说明
本模块首批接口从API version 9开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。 
 导入模块已复制import systemDateTime from '@ohos.systemDateTime';  systemDateTime.getCurrentTimegetCurrentTime(isNano: boolean, callback: AsyncCallback<number>): void 获取自Unix纪元以来经过的时间，使用callback异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    isNano  boolean  是  返回结果是否为纳秒数。 - true：表示返回结果为纳秒数（ns）。 - false：表示返回结果为毫秒数（ms）。   callback  AsyncCallback<number>  是  回调函数，返回自Unix纪元以来经过的时间。     示例： 已复制try {    systemDateTime.getCurrentTime(true, (error, time) => {        if (error) {            console.info(`Failed to get currentTime. message:${error.message}, code:${error.code}`);            return;        }        console.info(`Succeeded in getting currentTime : ${time}`);    });} catch(e) {    console.info(`Failed to get currentTime. message:${e.message}, code:${e.code}`);}  systemDateTime.getCurrentTimegetCurrentTime(callback: AsyncCallback<number>): void 获取自Unix纪元以来经过的时间，使用callback异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    callback  AsyncCallback<number>  是  回调函数，返回自Unix纪元以来经过的时间戳（ms）。     示例： 已复制try {    systemDateTime.getCurrentTime((error, time) => {        if (error) {            console.info(`Failed to get currentTime. message:${error.message}, code:${error.code}`);            return;        }        console.info(`Succeeded in getting currentTime : ${time}`);    });} catch(e) {    console.info(`Failed to get currentTime. message:${e.message}, code:${e.code}`);}  systemDateTime.getCurrentTimegetCurrentTime(isNano?: boolean): Promise<number> 获取自Unix纪元以来经过的时间，使用Promise异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    isNano  boolean  否  返回结果是否为纳秒数。 - true：表示返回结果为纳秒数（ns）。 - false：表示返回结果为毫秒数（ms）。     返回值：  类型  说明  Promise<number>  Promise对象，返回自Unix纪元以来经过的时间戳。     示例： 已复制try {    systemDateTime.getCurrentTime().then((time) => {        console.info(`Succeeded in getting currentTime : ${time}`);    }).catch((error) => {        console.info(`Failed to get currentTime. message:${error.message}, code:${error.code}`);    });} catch(e) {    console.info(`Failed to get currentTime. message:${e.message}, code:${e.code}`);}  systemDateTime.getRealActiveTimegetRealActiveTime(isNano: boolean, callback: AsyncCallback<number>): void 获取自系统启动以来经过的时间，不包括深度睡眠时间，使用callback异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    isNano  boolean  是  返回结果是否为纳秒数。 - true：表示返回结果为纳秒数（ns）。 - false：表示返回结果为毫秒数（ms）。   callback  AsyncCallback<number>  是  回调函数，返回自系统启动以来经过的时间，但不包括深度睡眠时间。     示例： 已复制try {    systemDateTime.getRealActiveTime(true, (error, time) => {        if (error) {            console.info(`Failed to get real active time. message:${error.message}, code:${error.code}`);            return;        }        console.info(`Succeeded in getting real active time : ${time}`);    });} catch(e) {    console.info(`Failed to get real active time. message:${e.message}, code:${e.code}`);}  systemDateTime.getRealActiveTimegetRealActiveTime(callback: AsyncCallback<number>): void 获取自系统启动以来经过的时间，不包括深度睡眠时间，使用callback异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    callback  AsyncCallback<number>  是  回调函数，返回自系统启动以来经过的时间，但不包括度睡眠时间。     示例： 已复制try {    systemDateTime.getRealActiveTime((error, time) => {        if (error) {            console.info(`Failed to get real active time. message:${error.message}, code:${error.code}`);            return;        }        console.info(`Succeeded in getting real active time : ${time}`);    });} catch(e) {    console.info(`Failed to get real active time. message:${e.message}, code:${e.code}`);}  systemDateTime.getRealActiveTimegetRealActiveTime(isNano?: boolean): Promise<number> 获取自系统启动以来经过的时间，不包括深度睡眠时间，使用Promise异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    isNano  boolean  否  返回结果是否为纳秒数。 - true：表示返回结果为纳秒数（ns）。 - false：表示返回结果为毫秒数（ms）。     返回值：  类型  说明  Promise<number>  Promise对象，返回自系统启动以来经过的时间，但不包括深度睡眠时间。     示例： 已复制try {    systemDateTime.getRealActiveTime().then((time) => {        console.info(`Succeeded in getting real active time : ${time}`);    }).catch((error) => {        console.info(`Failed to get real active time. message:${error.message}, code:${error.code}`);    });} catch(e) {    console.info(`Failed to get real active time. message:${e.message}, code:${e.code}`);}  systemDateTime.getRealTimegetRealTime(isNano: boolean, callback: AsyncCallback<number>): void 获取自系统启动以来经过的时间，包括深度睡眠时间，使用callback异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    isNano  boolean  是  返回结果是否为纳秒数。 - true：表示返回结果为纳秒数（ns）。 - false：表示返回结果为毫秒数（ms）。   callback  AsyncCallback<number>  是  回调函数，返回自系统启动以来经过的时间，包括深度睡眠时间。     示例： 已复制try {    systemDateTime.getRealTime(true, (error, time) => {        if (error) {            console.info(`Failed to get real time. message:${error.message}, code:${error.code}`);            return;        }        console.info(`Succeeded in getting real time : ${time}`);    });} catch(e) {    console.info(`Failed to get real time. message:${e.message}, code:${e.code}`);}  systemDateTime.getRealTimegetRealTime(callback: AsyncCallback<number>): void 获取自系统启动以来经过的时间，包括深度睡眠时间，使用callback异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    callback  AsyncCallback<number>  是  回调函数，返回自系统启动以来经过的时间，包括深度睡眠时间。     示例： 已复制try {    systemDateTime.getRealTime((error, time) => {        if (error) {            console.info(`Failed to get real time. message:${error.message}, code:${error.code}`);            return;        }        console.info(`Succeeded in getting real time : ${time}`);    });} catch(e) {    console.info(`Failed to get real time. message:${e.message}, code:${e.code}`);}  systemDateTime.getRealTimegetRealTime(isNano?: boolean): Promise<number> 获取自系统启动以来经过的时间，包括深度睡眠时间，使用Promise异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    isNano  boolean  否  返回结果是否为纳秒数。 - true：表示返回结果为纳秒数（ns）。 - false：表示返回结果为毫秒数（ms）。     返回值：  类型  说明  Promise<number>  Promise对象，返回自系统启动以来经过的时间，包括深度睡眠时间。     示例： 已复制try {    systemDateTime.getRealTime().then((time) => {        console.info(`Succeeded in getting real time : ${time}`);    }).catch((error) => {        console.info(`Failed to get real time. message:${error.message}, code:${error.code}`);    });} catch(e) {    console.info(`Failed to get real time. message:${e.message}, code:${e.code}`);}  systemDateTime.getDategetDate(callback: AsyncCallback<Date>): void 获取当前系统日期，使用callback异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    callback  AsyncCallback<Date>  是  回调函数，返回当前系统日期。     示例： 已复制try {    systemDateTime.getDate((error, date) => {        if (error) {            console.info(`Failed to get date. message:${error.message}, code:${error.code}`);            return;        }        console.info(`Succeeded in getting date : ${date}`);;    });} catch(e) {    console.info(`Failed to get date. message:${e.message}, code:${e.code}`);}  systemDateTime.getDategetDate(): Promise<Date> 获取当前系统日期，使用Promise异步回调。 系统能力： SystemCapability.MiscServices.Time 返回值：  类型  说明  Promise<Date>  Promise对象，返回当前系统日期。     示例： 已复制try {    systemDateTime.getDate().then((date) => {        console.info(`Succeeded in getting date : ${date}`);    }).catch((error) => {        console.info(`Failed to get date. message:${error.message}, code:${error.code}`);    });} catch(e) {    console.info(`Failed to get date. message:${e.message}, code:${e.code}`);}  systemDateTime.getTimezonegetTimezone(callback: AsyncCallback<string>): void 获取系统时区，使用callback异步回调。 系统能力： SystemCapability.MiscServices.Time 参数： 参数名  类型  必填  说明    callback  AsyncCallback<string>  是  回调函数，返回系统时区。具体可见支持的系统时区 。     示例： 已复制try {    systemDateTime.getTimezone((error, data) => {        if (error) {            console.info(`Failed to get timezone. message:${error.message}, code:${error.code}`);            return;        }        console.info(`Succeeded in get timezone : ${data}`);;    });} catch(e) {    console.info(`Failed to get timezone. message:${e.message}, code:${e.code}`);}  systemDateTime.getTimezonegetTimezone(): Promise<string> 获取系统时区，使用Promise异步回调。 系统能力： SystemCapability.MiscServices.Time 返回值：  类型  说明  Promise<string>  Promise对象，返回系统时区。具体可见支持的系统时区 。     示例： 已复制try {    systemDateTime.getTimezone().then((data) => {        console.info(`Succeeded in getting timezone: ${data}`);    }).catch((error) => {        console.info(`Failed to get timezone. message:${error.message}, code:${error.code}`);    });} catch(e) {    console.info(`Failed to get timezone. message:${e.message}, code:${e.code}`);}  支持的系统时区支持的系统时区及各时区与0时区相比的偏移量（单位：h）可见下表。  时区  偏移量  Antarctica/McMurdo  12   America/Argentina/Buenos_Aires  -3   Australia/Sydney  10   America/Noronha  -2   America/St_Johns  -3   Africa/Kinshasa  1   America/Santiago  -3   Asia/Shanghai  8   Asia/Nicosia  3   Europe/Berlin  2   America/Guayaquil  -5   Europe/Madrid  2   Pacific/Pohnpei  11   America/Godthab  -2   Asia/Jakarta  7   Pacific/Tarawa  12   Asia/Almaty  6   Pacific/Majuro  12   Asia/Ulaanbaatar  8   America/Mexico_City  -5   Asia/Kuala_Lumpur  8   Pacific/Auckland  12   Pacific/Tahiti  -10   Pacific/Port_Moresby  10   Asia/Gaza  3   Europe/Lisbon  1   Europe/Moscow  3   Europe/Kiev  3   Pacific/Wake  12   America/New_York  -4   Asia/Tashkent  5       上一篇 @ohos.screenLock (锁屏管理) 下一篇 @ohos.wallpaper (壁纸) 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。