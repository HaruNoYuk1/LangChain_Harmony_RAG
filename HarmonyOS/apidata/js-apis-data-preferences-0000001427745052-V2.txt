您正在浏览HarmonyOS开发者3.1/4.0版本配套的开发者文档，对应API能力级别为API 9 Release，详细版本配套关系请参考版本说明。导入模块常量dataPreferences.getPreferencesdataPreferences.getPreferencesdataPreferences.deletePreferencesdataPreferences.deletePreferencesdataPreferences.removePreferencesFromCachedataPreferences.removePreferencesFromCachePreferencesgetgetgetAllgetAllputputhashasdeletedeleteflushflushclearclearon('change')off('change')ValueType@ohos.data.preferences (用户首选项) 更新时间: 2024-03-18 17:33 毫无帮助帮助不大一般很好非常好
分享
 用户首选项为应用提供Key-Value键值型的数据处理能力，支持应用持久化轻量级数据，并对其修改和查询。 数据存储形式为键值对，键的类型为字符串型，值的存储数据类型包括数字型、字符型、布尔型以及这3种类型的数组类型。 
说明
本模块首批接口从API version 9开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。 
 导入模块已复制import dataPreferences from '@ohos.data.preferences';  常量系统能力： SystemCapability.DistributedDataManager.Preferences.Core 名称  参数类型  可读  可写  说明    MAX_KEY_LENGTH  number  是  否  Key的最大长度限制为80个字节。   MAX_VALUE_LENGTH  number  是  否  Value的最大长度限制为8192个字节。      dataPreferences.getPreferencesgetPreferences(context: Context, name: string, callback: AsyncCallback<Preferences>): void 获取Preferences实例，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   name  string  是  Preferences实例的名称。   callback  AsyncCallback<Preferences>  是  回调函数。当获取Preferences实例成功，err为undefined，返回Preferences实例；否则err为错误对象。     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility';let context = featureAbility.getContext();let preferences = null;
try {    dataPreferences.getPreferences(context, 'mystore', function (err, val) {        if (err) {            console.error("Failed to get preferences. code =" + err.code + ", message =" + err.message);            return;        }        preferences = val;        console.info("Succeeded in getting preferences.");    })} catch (err) {    console.error("Failed to get preferences. code =" + err.code + ", message =" + err.message);} Stage模型示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
let preferences = null;
class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage) {        try {            dataPreferences.getPreferences(this.context, 'mystore', function (err, val) {                if (err) {                    console.error("Failed to get preferences. code =" + err.code + ", message =" + err.message);                    return;                }                preferences = val;                console.info("Succeeded in getting preferences.");            })        } catch (err) {            console.error("Failed to get preferences. code =" + err.code + ", message =" + err.message);        }    }}  dataPreferences.getPreferencesgetPreferences(context: Context, name: string): Promise<Preferences> 获取Preferences实例，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   name  string  是  Preferences实例的名称。     返回值：  类型  说明  Promise<Preferences>  Promise对象，返回Preferences实例。     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility';let context = featureAbility.getContext();
let preferences = null;try {    let promise = dataPreferences.getPreferences(context, 'mystore');    promise.then((object) => {        preferences = object;        console.info("Succeeded in getting preferences.");    }).catch((err) => {        console.error("Failed to get preferences. code =" + err.code + ", message =" + err.message);    })} catch(err) {    console.error("Failed to get preferences. code =" + err.code + ", message =" + err.message);} Stage模型示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
let preferences = null;
class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage) {        try {            let promise = dataPreferences.getPreferences(this.context, 'mystore');            promise.then((object) => {                preferences = object;                console.info("Succeeded in getting preferences.");            }).catch((err) => {                console.error("Failed to get preferences. code =" + err.code + ", message =" + err.message);            })        } catch(err) {            console.error("Failed to get preferences. code =" + err.code + ", message =" + err.message);        }    }}  dataPreferences.deletePreferencesdeletePreferences(context: Context, name: string, callback: AsyncCallback<void>): void 从内存中移除指定的Preferences实例，使用callback异步回调。 若Preferences实例有对应的持久化文件，则同时删除其持久化文件。 调用该接口后，应用不允许再使用该Preferences实例进行数据操作，否则会出现数据一致性问题。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   name  string  是  Preferences实例的名称。   callback  AsyncCallback<void>  是  回调函数。当移除成功，err为undefined，否则为错误对象。     错误码： 以下错误码的详细介绍请参见用户首选项错误码。  错误码ID  错误信息  15500010  Failed to delete preferences.     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility';let context = featureAbility.getContext();
try {    dataPreferences.deletePreferences(context, 'mystore', function (err) {        if (err) {            console.error("Failed to delete preferences. code =" + err.code + ", message =" + err.message);            return;        }        console.info("Succeeded in deleting preferences." );    })} catch (err) {    console.error("Failed to delete preferences. code =" + err.code + ", message =" + err.message);} Stage模型示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage) {        try {            dataPreferences.deletePreferences(this.context, 'mystore', function (err) {                if (err) {                    console.error("Failed to delete preferences. code =" + err.code + ", message =" + err.message);                    return;                }                console.info("Succeeded in deleting preferences." );            })        } catch (err) {            console.error("Failed to delete preferences. code =" + err.code + ", message =" + err.message);        }    }}  dataPreferences.deletePreferencesdeletePreferences(context: Context, name: string): Promise<void> 从内存中移除指定的Preferences实例，使用Promise异步回调。 若Preferences实例有对应的持久化文件，则同时删除其持久化文件。 调用该接口后，应用不允许再使用该Preferences实例进行数据操作，否则会出现数据一致性问题。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   name  string  是  Preferences实例的名称。     返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     错误码： 以下错误码的详细介绍请参见用户首选项错误码。  错误码ID  错误信息  15500010  Failed to delete preferences.     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility';let context = featureAbility.getContext();
try {    let promise = dataPreferences.deletePreferences(context, 'mystore');    promise.then(() => {        console.info("Succeeded in deleting preferences.");    }).catch((err) => {        console.error("Failed to delete preferences. code =" + err.code + ", message =" + err.message);    })} catch(err) {    console.error("Failed to delete preferences. code =" + err.code + ", message =" + err.message);} Stage模型示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage) {        try{            let promise = dataPreferences.deletePreferences(this.context, 'mystore');            promise.then(() => {                console.info("Succeeded in deleting preferences.");            }).catch((err) => {                console.error("Failed to delete preferences. code =" + err.code + ", message =" + err.message);            })        } catch(err) {            console.error("Failed to delete preferences. code =" + err.code + ", message =" + err.message);        }    }}  dataPreferences.removePreferencesFromCacheremovePreferencesFromCache(context: Context, name: string, callback: AsyncCallback<void>): void 从内存中移除指定的Preferences实例，使用callback异步回调。 调用该接口后，应用不允许再使用该Preferences实例进行数据操作，否则会出现数据一致性问题。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   name  string  是  Preferences实例的名称。   callback  AsyncCallback<void>  是  回调函数。当移除成功，err为undefined，否则为错误对象。     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility';let context = featureAbility.getContext();
try {    dataPreferences.removePreferencesFromCache(context, 'mystore', function (err) {        if (err) {            console.error("Failed to remove preferences. code =" + err.code + ", message =" + err.message);            return;        }        console.info("Succeeded in removing preferences.");    })} catch (err) {    console.error("Failed to remove preferences. code =" + err.code + ", message =" + err.message);} Stage模型示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage) {        try {            dataPreferences.removePreferencesFromCache(this.context, 'mystore', function (err) {                if (err) {                    console.error("Failed to remove preferences. code =" + err.code + ", message =" + err.message);                    return;                }                console.info("Succeeded in removing preferences.");            })        } catch (err) {            console.error("Failed to remove preferences. code =" + err.code + ", message =" + err.message);        }    }}  dataPreferences.removePreferencesFromCacheremovePreferencesFromCache(context: Context, name: string): Promise<void> 从内存中移除指定的Preferences实例，使用Promise异步回调。 调用该接口后，应用不允许再使用该Preferences实例进行数据操作，否则会出现数据一致性问题。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    context  Context  是  应用上下文。 FA模型的应用Context定义见Context。 Stage模型的应用Context定义见Context。   name  string  是  Preferences实例的名称。     返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     示例： FA模型示例： 已复制// 获取contextimport featureAbility from '@ohos.ability.featureAbility';let context = featureAbility.getContext();
try {    let promise = dataPreferences.removePreferencesFromCache(context, 'mystore');    promise.then(() => {        console.info("Succeeded in removing preferences.");    }).catch((err) => {        console.error("Failed to remove preferences. code =" + err.code + ", message =" + err.message);    })} catch(err) {    console.error("Failed to remove preferences. code =" + err.code + ", message =" + err.message);} Stage模型示例： 已复制import UIAbility from '@ohos.app.ability.UIAbility';
class EntryAbility extends UIAbility {    onWindowStageCreate(windowStage) {        try {            let promise = dataPreferences.removePreferencesFromCache(this.context, 'mystore');            promise.then(() => {                console.info("Succeeded in removing preferences.");            }).catch((err) => {                console.error("Failed to remove preferences. code =" + err.code + ", message =" + err.message);            })        } catch(err) {            console.error("Failed to remove preferences. code =" + err.code + ", message =" + err.message);        }    }}  Preferences存储实例，提供获取和修改存储数据的接口。 下列接口都需先使用data_preferences.getPreferences获取到Preferences实例，再通过此实例调用对应接口。  getget(key: string, defValue: ValueType, callback: AsyncCallback<ValueType>): void 获取键对应的值，如果值为null或者非默认值类型，返回默认数据defValue，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储Key名称，不能为空。   defValue  ValueType  是  默认返回值。支持number、string、boolean、Array<number>、Array<string>、Array<boolean>类型。   callback  AsyncCallback<ValueType>  是  回调函数。当获取成功时，err为undefined，data为键对应的值；否则err为错误对象。     示例： 已复制try {    preferences.get('startup', 'default', function (err, val) {        if (err) {            console.error("Failed to get value of 'startup'. code =" + err.code + ", message =" + err.message);            return;        }        console.info("Succeeded in getting value of 'startup'. val： " + val);    })} catch (err) {    console.error("Failed to get value of 'startup'. code =" + err.code + ", message =" + err.message);}  getget(key: string, defValue: ValueType): Promise<ValueType> 获取键对应的值，如果值为null或者非默认值类型，返回默认数据defValue，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要获取的存储Key名称，不能为空。   defValue  ValueType  是  默认返回值。支持number、string、boolean、Array<number>、Array<string>、Array<boolean>类型。     返回值：  类型  说明  Promise<ValueType>  Promise对象，返回键对应的值。     示例： 已复制try {    let promise = preferences.get('startup', 'default');    promise.then((data) => {        console.info("Succeeded in getting value of 'startup'. Data: " + data);    }).catch((err) => {        console.error("Failed to get value of 'startup'. code =" + err.code + ", message =" + err.message);    })} catch(err) {    console.error("Failed to get value of 'startup'. code =" + err.code + ", message =" + err.message);}  getAllgetAll(callback: AsyncCallback<Object>): void; 获取含有所有键值的Object对象。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    callback  AsyncCallback<Object>  是  回调函数。当获取成功，err为undefined，value为含有所有键值的Object对象；否则err为错误对象。     示例： 已复制try {    preferences.getAll(function (err, value) {        if (err) {            console.error("Failed to get all key-values. code =" + err.code + ", message =" + err.message);            return;        }    let allKeys = Object.keys(value);    console.info("getAll keys = " + allKeys);    console.info("getAll object = " + JSON.stringify(value));    })} catch (err) {    console.error("Failed to get all key-values. code =" + err.code + ", message =" + err.message);}  getAllgetAll(): Promise<Object> 获取含有所有键值的Object对象。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 返回值：  类型  说明  Promise<Object>  Promise对象，返回含有所有键值的Object对象。     示例： 已复制try {    let promise = preferences.getAll();    promise.then((value) => {        let allKeys = Object.keys(value);        console.info('getAll keys = ' + allKeys);        console.info("getAll object = " + JSON.stringify(value));    }).catch((err) => {        console.error("Failed to get all key-values. code =" + err.code + ", message =" + err.message);    })} catch (err) {    console.error("Failed to get all key-values. code =" + err.code + ", message =" + err.message);}  putput(key: string, value: ValueType, callback: AsyncCallback<void>): void 将数据写入Preferences实例，可通过flush将Preferences实例持久化，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要修改的存储的Key，不能为空。   value  ValueType  是  存储的新值。支持number、string、boolean、Array<number>、Array<string>、Array<boolean>类型。   callback  AsyncCallback<void>  是  回调函数。当数据写入成功，err为undefined；否则为错误对象。     示例： 已复制try {    preferences.put('startup', 'auto', function (err) {        if (err) {            console.error("Failed to put value of 'startup'. code =" + err.code + ", message =" + err.message);            return;        }        console.info("Succeeded in putting value of 'startup'.");    })} catch (err) {    console.error("Failed to put value of 'startup'. code =" + err.code + ", message =" + err.message);}  putput(key: string, value: ValueType): Promise<void> 将数据写入Preferences实例，可通过flush将Preferences实例持久化，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要修改的存储的Key，不能为空。   value  ValueType  是  存储的新值。支持number、string、boolean、Array<number>、Array<string>、Array<boolean>类型。     返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     示例： 已复制try {    let promise = preferences.put('startup', 'auto');    promise.then(() => {        console.info("Succeeded in putting value of 'startup'.");    }).catch((err) => {        console.error("Failed to put value of 'startup'. code =" + err.code +", message =" + err.message);    })} catch(err) {    console.error("Failed to put value of 'startup'. code =" + err.code +", message =" + err.message);}  hashas(key: string, callback: AsyncCallback<boolean>): void 检查Preferences实例是否包含名为给定Key的存储键值对，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要检查的存储key名称，不能为空。   callback  AsyncCallback<boolean>  是  回调函数。返回Preferences实例是否包含给定key的存储键值对，true表示存在，false表示不存在。     示例： 已复制try {    preferences.has('startup', function (err, val) {        if (err) {            console.error("Failed to check the key 'startup'. code =" + err.code + ", message =" + err.message);            return;        }        if (val) {            console.info("The key 'startup' is contained.");        } else {            console.info("The key 'startup' dose not contain.");        }  })} catch (err) {    console.error("Failed to check the key 'startup'. code =" + err.code + ", message =" + err.message);}  hashas(key: string): Promise<boolean> 检查Preferences实例是否包含名为给定Key的存储键值对，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要检查的存储key名称，不能为空。     返回值：  类型  说明  Promise<boolean>  Promise对象。返回Preferences实例是否包含给定key的存储键值对，true表示存在，false表示不存在。     示例： 已复制try {    let promise = preferences.has('startup');    promise.then((val) => {        if (val) {            console.info("The key 'startup' is contained.");        } else {            console.info("The key 'startup' dose not contain.");        }    }).catch((err) => {        console.error("Failed to check the key 'startup'. code =" + err.code + ", message =" + err.message);  })} catch(err) {    console.error("Failed to check the key 'startup'. code =" + err.code + ", message =" + err.message);}  deletedelete(key: string, callback: AsyncCallback<void>): void 从Preferences实例中删除名为给定Key的存储键值对，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要删除的存储Key名称，不能为空。   callback  AsyncCallback<void>  是  回调函数。当删除成功，err为undefined；否则为错误对象。     示例： 已复制try {    preferences.delete('startup', function (err) {        if (err) {            console.error("Failed to delete the key 'startup'. code =" + err.code + ", message =" + err.message);            return;        }        console.info("Succeeded in deleting the key 'startup'.");    })} catch (err) {    console.error("Failed to delete the key 'startup'. code =" + err.code + ", message =" + err.message);}  deletedelete(key: string): Promise<void> 从Preferences实例中删除名为给定Key的存储键值对，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    key  string  是  要删除的存储key名称，不能为空。     返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     示例： 已复制try {    let promise = preferences.delete('startup');    promise.then(() => {        console.info("Succeeded in deleting the key 'startup'.");    }).catch((err) => {        console.error("Failed to delete the key 'startup'. code =" + err.code +", message =" + err.message);    })} catch(err) {    console.error("Failed to delete the key 'startup'. code =" + err.code +", message =" + err.message);}  flushflush(callback: AsyncCallback<void>): void 将当前Preferences实例的数据异步存储到用户首选项的持久化文件中，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  回调函数。当保存成功，err为undefined；否则为错误对象。     示例： 已复制try {    preferences.flush(function (err) {        if (err) {            console.error("Failed to flush. code =" + err.code + ", message =" + err.message);            return;        }        console.info("Succeeded in flushing.");    })} catch (err) {    console.error("Failed to flush. code =" + err.code + ", message =" + err.message);}  flushflush(): Promise<void> 将当前Preferences实例的数据异步存储到用户首选项的持久化文件中，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     示例： 已复制try {    let promise = preferences.flush();    promise.then(() => {        console.info("Succeeded in flushing.");    }).catch((err) => {        console.error("Failed to flush. code =" + err.code + ", message =" + err.message);    })} catch (err) {    console.error("Failed to flush. code =" + err.code + ", message =" + err.message);}  clearclear(callback: AsyncCallback<void>): void 清除此Preferences实例中的所有存储，使用callback异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    callback  AsyncCallback<void>  是  回调函数。当清除成功，err为undefined；否则为错误对象。     示例： 已复制try {    preferences.clear(function (err) {        if (err) {            console.error("Failed to clear. code =" + err.code + ", message =" + err.message);            return;        }        console.info("Succeeded in clearing.");    })} catch (err) {    console.error("Failed to clear. code =" + err.code + ", message =" + err.message);}  clearclear(): Promise<void> 清除此Preferences实例中的所有存储，使用Promise异步回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 返回值：  类型  说明  Promise<void>  无返回结果的Promise对象。     示例： 已复制try {    let promise = preferences.clear();    promise.then(() => {        console.info("Succeeded in clearing.");    }).catch((err) => {        console.error("Failed to clear. code =" + err.code + ", message =" + err.message);    })} catch(err) {    console.error("Failed to clear. code =" + err.code + ", message =" + err.message);}  on('change')on(type: 'change', callback: Callback<{ key : string }>): void 订阅数据变更，订阅的Key的值发生变更后，在执行flush方法后，触发callback回调。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    type  string  是  事件类型，固定值'change'，表示数据变更。   callback  Callback<{ key : string }>  是  回调对象实例。     示例： 已复制try {    dataPreferences.getPreferences(this.context, 'mystore', function (err, preferences) {        if (err) {            console.error("Failed to get preferences.");            return;        }        let observer = function (key) {            console.info("The key " + key + " changed.");        }        preferences.on('change', observer);        preferences.put('startup', 'manual', function (err) {            if (err) {                console.error("Failed to put the value of 'startup'. Cause: " + err);                return;            }            console.info("Succeeded in putting the value of 'startup'.");
            preferences.flush(function (err) {                if (err) {                    console.error("Failed to flush. Cause: " + err);                    return;                }                console.info("Succeeded in flushing.");            })        })    })} catch (err) {    console.error("Failed to flush. code =" + err.code + ", message =" + err.message);}  off('change')off(type: 'change', callback?: Callback<{ key : string }>): void 取消订阅数据变更。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core 参数： 参数名  类型  必填  说明    type  string  是  事件类型，固定值'change'，表示数据变更。   callback  Callback<{ key : string }>  否  需要取消的回调对象实例，不填写则全部取消。     示例： 已复制try {    dataPreferences.getPreferences(this.context, 'mystore', function (err, preferences) {        if (err) {            console.error("Failed to get preferences.");            return;        }        let observer = function (key) {            console.info("The key " + key + " changed.");        }        preferences.on('change', observer);        preferences.put('startup', 'auto', function (err) {            if (err) {                console.error("Failed to put the value of 'startup'. Cause: " + err);                return;            }            console.info("Succeeded in putting the value of 'startup'.");
            preferences.flush(function (err) {                if (err) {                    console.error("Failed to flush. Cause: " + err);                    return;                }                console.info("Succeeded in flushing.");            })            preferences.off('change', observer);        })    })} catch (err) {    console.error("Failed to flush. code =" + err.code + ", message =" + err.message);}  ValueType用于表示允许的数据字段类型。 系统能力： SystemCapability.DistributedDataManager.Preferences.Core  类型  说明  number  表示值类型为数字。   string  表示值类型为字符串。   boolean  表示值类型为布尔值。   Array<number>  表示值类型为数字类型的数组。   Array<boolean>  表示值类型为布尔类型的数组。   Array<string>  表示值类型为字符串类型的数组。       上一篇 @ohos.data.distributedKVStore (分布式键值数据库) 下一篇 @ohos.data.relationalStore (关系型数据库) 以上内容对您是否有帮助？毫无帮助帮助不大一般很好非常好意见反馈
更多帮助请到“社区论坛”，如需要其他帮助，请通过“智能客服”提问。